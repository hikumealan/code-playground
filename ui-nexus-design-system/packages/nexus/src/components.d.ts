/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { propSize } from "./components/nexus-accordion/nexus-accordion";
import { propSize2 } from "./components/nexus-accordion/nexus-accordion-content/nexus-accordion-content";
import { propVariant } from "./components/nexus-badge/nexus-badge";
import { axisTickFontFamilyProp, axisTickFontSizeProp, barStrokeProp, colorSchemeProp, interpolationProp, legendFontSizeProp, orientationProp, strokeProp, strokeWidthProp, TickFormatProp } from "./components/nexus-charts/utils/chartsTypes";
import { NexusBarChartProps } from "./components/nexus-charts/interfaces/nexus-bar-chart";
import { Config } from "./components/nexus-carousel/nexus-carousel";
import { dropDownTypeProp, placementProp } from "./components/nexus-dropdown/nexus-dropdown";
import { propSize as propSize1 } from "./components/nexus-icon/nexus-icon";
import { inputFieldType } from "./components/nexus-input/nexus-input";
import { NexusLineChartProps } from "./components/nexus-charts/interfaces/nexus-line-chart";
import { typVariant } from "./components/nexus-notification/nexus-notification";
import { NexusPieChartProps } from "./components/nexus-charts/interfaces/nexus-pie-chart";
import { NexusStackedBarChartProps } from "./components/nexus-charts/interfaces/nexus-stacked-bar-chart";
import { tableVariant } from "./components/nexus-table/nexus-table";
import { typVariant1 } from "./components/nexus-toast/nexus-toast";
import { typSize } from "./components/nexus-toggle/nexus-toggle";
export namespace Components {
    interface NexusAccordion {
        /**
          * Whether the accordion is open.
         */
        "open": boolean;
        /**
          * Adjust Accordion inner content padding left and right.
         */
        "size": propSize;
    }
    interface NexusAccordionContent {
        /**
          * Adjust content padding left right.
         */
        "size": propSize2;
    }
    interface NexusAccordionGroup {
        /**
          * Disable/Enable accordion collapse of an already open accordion when a new accordion open is triggered.
         */
        "alwaysOpen": boolean;
    }
    interface NexusAccordionTrigger {
        /**
          * Align header content.
         */
        "align": 'start' | 'center' | 'end';
    }
    interface NexusAvatar {
        /**
          * Specify a custom class to override styles of the Avatar component.
         */
        "avatarClassName": string;
        /**
          * Avatar dark mode.
         */
        "avatarDark": boolean;
        /**
          * Specifies the path to the image.
         */
        "avatarImageSrc": string;
        /**
          * Avatar logo icon.
         */
        "avatarLogoIcon": string;
        /**
          * Avatar name display.
         */
        "avatarNameDisplay": boolean;
        /**
          * Avatar notification icon.
         */
        "avatarNotification": string;
        /**
          * Avatar Size.
         */
        "avatarSize": string;
        /**
          * Avatar connection status.
         */
        "avatarStatus": string;
        /**
          * Specifies an alternate text for an image.
         */
        "description": string;
        /**
          * Will be used as a description and formated as initials if no src is provided.
         */
        "userName": string;
    }
    interface NexusBadge {
        /**
          * Whether the badge overlaps its parent.
         */
        "overlap": boolean;
        /**
          * The style of the badge.
         */
        "variant": propVariant;
    }
    interface NexusBarChart {
        /**
          * Label font size
         */
        "axisLabelFontSize": number;
        /**
          * Tick font family.
         */
        "axisTickFontFamily": axisTickFontFamilyProp;
        /**
          * Tick font size. Valid values are 8, 9, 10, 12.
         */
        "axisTickFontSize": axisTickFontSizeProp;
        /**
          * Bar edge color. Valid values are 'transparent', 'black', 'white' and 'gray'.
         */
        "barStroke": barStrokeProp;
        /**
          * Bar stroke width. Valid values are 'none', 1, 2 and 5.
         */
        "barStrokeWidth": strokeWidthProp;
        /**
          * Canvas Height
         */
        "canvasHeight": number;
        /**
          * Canvas Width
         */
        "canvasWidth": number;
        /**
          * Nexus bar chart props
         */
        "chartData": NexusBarChartProps[];
        /**
          * Chart unique Identifier
         */
        "chartId": string;
        /**
          * Chart color scheme. Valid values are 'category10', 'accent', "paired", 'set1', 'set2', 'set3', 'black' and 'gray'.
         */
        "colorScheme": colorSchemeProp;
        /**
          * Show/Hide grid lines. Default value is 'false'.
         */
        "gridlines": boolean;
        /**
          * Hide X-Axis. Default value is 'false'.
         */
        "hideXAxis": boolean;
        /**
          * Hide X-Ticks. Default value is 'false'.
         */
        "hideXTicks": boolean;
        /**
          * Hide Y-Axis. Default value is 'false'.
         */
        "hideYAxis": boolean;
        /**
          * Hide Y-Ticks. Default value is 'false'.
         */
        "hideYTicks": boolean;
        /**
          * Invert background colors. Default value is 'false'
         */
        "inverse": boolean;
        /**
          * Should display legend. Default value is 'true'.
         */
        "legend": boolean;
        /**
          * Set legend font size. Valid values are 10, 12, 14.
         */
        "legendFontSize": legendFontSizeProp;
        /**
          * Set legend metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then legendMetric = 'make'.
         */
        "legendMetric": string;
        /**
          * Set legend width.
         */
        "legendWidth": number;
        /**
          * Set linear metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then linearMetric = 'make'.
         */
        "linearMetric": string;
        /**
          * Set linear tick format. Valid values are 'USD', 'localestring', 'localestring1d', 'localestring2d', 'percent', 'percent1d', 'percent2d', 'YYYY', 'M/D/YYYY', 'M/D/YY', 'MM/DD/YYYY', 'MM YYYY', 'MMM D, YYYY', 'ISODATE', 'raw'
         */
        "linearTickFormat": TickFormatProp;
        /**
          * Canvas margin bottom offset. Default value is 25.
         */
        "marginBottom": number;
        /**
          * Canvas margin left offset. Default value is 25.
         */
        "marginLeft": number;
        /**
          * Canvas margin right offset. Default value is 25.
         */
        "marginRight": number;
        /**
          * Canvas margin top offset. Default value is 25.
         */
        "marginTop": number;
        /**
          * Maximum Bar width.
         */
        "maxBarWidth": number;
        /**
          * Set ordinal metic string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then ordinalMetric = 'make'.
         */
        "ordinalMetric": string;
        /**
          * Orientation of the graph. Default value is 'vertical'. Valid values are 'horizontal' and 'vertical'.
         */
        "orientation": orientationProp;
        /**
          * Is graph responsive. Default value is 'true'.
         */
        "responsive": boolean;
        /**
          * show/hide tooltips. Default value is 'false'.
         */
        "tooltips": boolean;
        /**
          * Label on x-axis. Default value is ''.
         */
        "xLabel": string;
        /**
          * X-axis tick size.
         */
        "xTickSize": number;
        /**
          * Label on x-axis. Default value is ''.
         */
        "yLabel": string;
        /**
          * Y-axis tick size.
         */
        "yTickSize": number;
    }
    interface NexusBreadcrumb {
        /**
          * The separation between the breadcrumb items. Can pass any character.
         */
        "separator": string;
    }
    interface NexusBreadcrumbItem {
        /**
          * Whether the breadcrumb item is disabled.
         */
        "disabled": boolean;
    }
    interface NexusCard {
        /**
          * Background color of the card
         */
        "bgColor": string;
        /**
          * Background image path of the card
         */
        "bgImage": string;
        /**
          * If set to `true` the entire card will be clickable based on the anchor tag found inside the component.
         */
        "clickable": boolean;
        /**
          * The height to the card
         */
        "height": string;
    }
    interface NexusCardAvatar {
    }
    interface NexusCardBody {
    }
    interface NexusCardBodyImage {
    }
    interface NexusCardFooter {
    }
    interface NexusCardHeader {
    }
    interface NexusCardHeaderButton {
    }
    interface NexusCardHeaderDetails {
    }
    interface NexusCardHeaderSubtitle {
    }
    interface NexusCardHeaderTitle {
    }
    interface NexusCarousel {
        /**
          * Configuration options
         */
        "options": Config[];
    }
    interface NexusCarouselItem {
    }
    interface NexusCharts {
    }
    interface NexusCheckbox {
        /**
          * The unique identifier of the checkbox.
         */
        "attrId": string;
        /**
          * Whether the input is checked.
         */
        "checked": boolean;
        /**
          * Whether the input is disabled.
         */
        "disabled": boolean;
        /**
          * Whether the input is in an indeterminate state.
         */
        "indeterminate": boolean;
        /**
          * Whether the input is required.
         */
        "required": boolean;
    }
    interface NexusChip {
        /**
          * Whether the chip is disabled, making it unusable and unclickable.
         */
        "disabled": boolean;
        /**
          * Whether the chip is in a error state
         */
        "error": boolean;
        /**
          * Whether the chip contains the "X" icon, notifying the user that they can remove that chip.
         */
        "removable": boolean;
        /**
          * Whether a green border is added to the chip, showing success state.
         */
        "success": boolean;
    }
    interface NexusChipGroup {
    }
    interface NexusDropdown {
        /**
          * Whether the dropdown is basic
         */
        "dropdownType": dropDownTypeProp;
        /**
          * Maximal height of dropdown
         */
        "height": number;
        /**
          * Whether the select is native
         */
        "placement": placementProp;
        "setDropdownTop": (top: any) => Promise<void>;
        /**
          * Show and hide dropdown content
         */
        "show": boolean;
        /**
          * Maximal width of dropdown
         */
        "width": number;
    }
    interface NexusErrorMessage {
    }
    interface NexusFileUpload {
        /**
          * Specifies file types the user can select from.
         */
        "accept": string;
        /**
          * The Unique identifier for the input and the label to match. If none is provided one will be added by default.
         */
        "attrId": string;
        /**
          * Whether the input is disabled.
         */
        "disabled": boolean;
        /**
          * Whether you can upload multiple files at once.
         */
        "multiple": boolean;
        /**
          * Whether the input is required.
         */
        "required": boolean;
    }
    interface NexusFooter {
    }
    interface NexusFooterBottom {
    }
    interface NexusFooterColumn {
    }
    interface NexusFooterContent {
    }
    interface NexusFooterContentTitle {
    }
    interface NexusFooterLogo {
    }
    interface NexusFormField {
    }
    interface NexusHeader {
    }
    interface NexusHeaderLogo {
    }
    interface NexusHeaderMenu {
    }
    interface NexusIcon {
        /**
          * Alternative text for accessibility.
         */
        "alt": string;
        /**
          * The precompiled content of the svg.
         */
        "content": string;
        /**
          * Adjust the icon size (xs = 12px, sm = 16px, md = 24px, lg = 48px, xl = 64px).
         */
        "size": propSize;
        /**
          * Making applied size can't changed upon re-layouting of parent container by applying min width and height value as its specified in width and height
         */
        "sizeLock": boolean;
        /**
          * The path to the svg. Will request the SVG.
         */
        "src": string;
        /**
          * Enables to load the icons using img markup, Improves performance since it uses browser cache to save image and reduces repeated calls.
         */
        "type": 'svg' | 'img';
    }
    interface NexusInput {
        /**
          * The Unique identifier for the input and the label to match. If none is provided one will be added by default.
         */
        "attrId": string;
        /**
          * Disables autocomplete
         */
        "autocomplete": 'off';
        /**
          * Whether the form control is disabled
         */
        "disabled": boolean;
        /**
          * Specify the Maximum value of the input field
         */
        "max": string;
        /**
          * Maximum length (number of characters) of value
         */
        "maxLength": number;
        /**
          * Specify the Minimum value of the input field
         */
        "min": string;
        /**
          * Minimum length (number of characters) of value
         */
        "minLength": number;
        /**
          * Minimum length (number of characters) of value
         */
        "placeholder": string;
        /**
          * The readonly of the input
         */
        "readonly": boolean;
        /**
          * Whether the form control is required
         */
        "required": boolean;
        /**
          * The type of input element
         */
        "type": inputFieldType;
        /**
          * The value of the input
         */
        "value": string;
    }
    interface NexusLabel {
    }
    interface NexusLineChart {
        /**
          * label font size
         */
        "axisLabelFontSize": number;
        /**
          * Tick font family. Valid values are 'interstate', 'sans', 'serif' and 'monospace'.
         */
        "axisTickFontFamily": axisTickFontFamilyProp;
        /**
          * Tick font size. Valid values are 8, 9, 10, 12.
         */
        "axisTickFontSize": axisTickFontSizeProp;
        /**
          * Canvas Height
         */
        "canvasHeight": number;
        /**
          * Canvas Width
         */
        "canvasWidth": number;
        /**
          * Nexus line chart props
         */
        "chartData": NexusLineChartProps;
        /**
          * Chart unique Identifier
         */
        "chartId": string;
        /**
          * Chart color scheme. Valid values are 'category10', 'accent', "paired", 'set1', 'set2', 'set3', 'black' and 'gray'.
         */
        "colorScheme": colorSchemeProp;
        /**
          * Show/Hide grid lines. Default value is 'false'.
         */
        "gridlines": boolean;
        /**
          * Hide X-Axis. Default value is 'false'.
         */
        "hideXAxis": boolean;
        /**
          * Hide X-Ticks. Default value is 'false'.
         */
        "hideXTicks": boolean;
        /**
          * Hide Y-Axis. Default value is 'false'.
         */
        "hideYAxis": boolean;
        /**
          * Hide Y-Ticks. Default value is 'false'.
         */
        "hideYTicks": boolean;
        /**
          * Interpolation type. Valid values are 'linear', 'basic', 'monotone', 'step-before' and 'step-after'.
         */
        "interpolation": interpolationProp;
        /**
          * Invert background colors. Default value is 'false'
         */
        "inverse": boolean;
        /**
          * Should display legend. Default value is 'true'.
         */
        "legend": boolean;
        /**
          * Set legend font size. Valid values are 10, 12, 14.
         */
        "legendFontSize": legendFontSizeProp;
        /**
          * Set legend metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then legendMetric = 'make'.
         */
        "legendMetric": string;
        /**
          * Set legend width.
         */
        "legendWidth": number;
        /**
          * Canvas margin bottom offset. Default value is 25.
         */
        "marginBottom": number;
        /**
          * Canvas margin left offset. Default value is 25.
         */
        "marginLeft": number;
        /**
          * Canvas margin right offset. Default value is 25.
         */
        "marginRight": number;
        /**
          * Canvas margin top offset. Default value is 25.
         */
        "marginTop": number;
        /**
          * Is graph responsive. Default value is 'true'.
         */
        "responsive": boolean;
        /**
          * Edge of the line graph. Valid values are 1, 2, 4 and 6.
         */
        "strokeWidth": strokeWidthProp;
        /**
          * Should display tooltips. Default value is 'true'.
         */
        "tooltips": boolean;
        /**
          * Should display vertices. Default value is 'true'.
         */
        "vertices": boolean;
        /**
          * X-axis label.
         */
        "xLabel": string;
        /**
          * Set X-axis metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then xMetric = 'make'.
         */
        "xMetric": string;
        /**
          * Set X-axis tick format. Valid values are 'USD', 'localestring', 'localestring1d', 'localestring2d', 'percent', 'percent1d', 'percent2d', 'YYYY', 'M/D/YYYY', 'M/D/YY', 'MM/DD/YYYY', 'MM YYYY', 'MMM D, YYYY', 'ISODATE', 'raw'
         */
        "xTickFormat": TickFormatProp;
        /**
          * X-axis tick size.
         */
        "xTickSize": number;
        /**
          * Y-axis Label.
         */
        "yLabel": string;
        /**
          * Set Y-axis metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then yMetric = 'make'.
         */
        "yMetric": string;
        /**
          * Set Y-axis tick format. Valid values are 'USD', 'localestring', 'localestring1d', 'localestring2d', 'percent', 'percent1d', 'percent2d', 'YYYY', 'M/D/YYYY', 'M/D/YY', 'MM/DD/YYYY', 'MM YYYY', 'MMM D, YYYY', 'ISODATE', 'raw'
         */
        "yTickFormat": TickFormatProp;
        /**
          * Y-axis tick size.
         */
        "yTickSize": number;
    }
    interface NexusLoader {
        /**
          * Whether the loader is fullscreen.
         */
        "fullscreen": boolean;
        /**
          * Whether the loader is shown.
         */
        "show": boolean;
    }
    interface NexusMenu {
        /**
          * Whether the menu is open
         */
        "open": boolean;
        /**
          * Side of the viewport to open the menu from
         */
        "position": 'left' | 'right';
    }
    interface NexusMenuItem {
    }
    interface NexusMessage {
    }
    interface NexusModal {
        /**
          * Whether the modal is fullscreen.
         */
        "fullscreen": boolean;
        /**
          * Whether to show the modal.
         */
        "show": boolean;
        /**
          * Adjust modal width.
         */
        "size": 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full';
    }
    interface NexusModalBody {
    }
    interface NexusModalFooter {
    }
    interface NexusModalHeader {
    }
    interface NexusModalHeaderSubtitle {
    }
    interface NexusNotification {
        /**
          * The type of notification
         */
        "variant": typVariant;
    }
    interface NexusOption {
        /**
          * Is the option disabled
         */
        "disabled": boolean;
        /**
          * Add hover effect if keydown is pressed
         */
        "keyhover": boolean;
        /**
          * Label for the option.
         */
        "label": string | number | boolean;
        /**
          * Multipe option selection.
         */
        "multiple": boolean;
        /**
          * Is the option selected
         */
        "selected": boolean;
        /**
          * set the Prop values for option
         */
        "setPropsValue": (value: any) => Promise<void>;
        /**
          * Value for the option selected.
         */
        "value": string | number | boolean;
    }
    interface NexusPagination {
        /**
          * Current Page
         */
        "current": number;
        /**
          * Max number of pages
         */
        "max": number;
    }
    interface NexusPieChart {
        /**
          * Canvas Height
         */
        "canvasHeight": number;
        /**
          * Canvas Width
         */
        "canvasWidth": number;
        /**
          * Nexus pie chart props
         */
        "chartData": NexusPieChartProps;
        /**
          * Chart unique Identifier
         */
        "chartId": string;
        /**
          * Chart color scheme. Valid values are 'category10', 'accent', "paired", 'set1', 'set2', 'set3', 'black' and 'gray'.
         */
        "colorScheme": colorSchemeProp;
        /**
          * Chart inner radius.
         */
        "innerRadius": number;
        /**
          * Invert background colors. Default value is 'false'
         */
        "inverse": boolean;
        /**
          * Should display legend. Default value is 'true'.
         */
        "legend": boolean;
        /**
          * Set legend font size. Valid values are 10, 12, 14.
         */
        "legendFontSize": legendFontSizeProp;
        /**
          * Set legend metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then legendMetric = 'make'.
         */
        "legendMetric": string;
        /**
          * Set legend width.
         */
        "legendWidth": number;
        /**
          * Canvas margin bottom offset. Default value is 0.
         */
        "marginBottom": number;
        /**
          * Canvas margin left offset. Default value is 0.
         */
        "marginLeft": number;
        /**
          * Canvas margin right offset. Default value is 0.
         */
        "marginRight": number;
        /**
          * Canvas margin top offset. Default value is 0.
         */
        "marginTop": number;
        /**
          * Is graph responsive. Default value is 'true'.
         */
        "responsive": boolean;
        /**
          * Pie chart edge color. Valid values are 'transparent', 'black', 'white' and 'gray'.
         */
        "stroke": strokeProp;
        /**
          * Pie chart edge width. Valid values are 1, 2, 3 and 5.
         */
        "strokeWidth": strokeWidthProp;
        /**
          * Should display tooltips. Default value is 'true'.
         */
        "tooltips": boolean;
        /**
          * Set value format. Valid values are 'USD', 'localestring', 'localestring1d', 'localestring2d', 'percent', 'percent1d', 'percent2d', 'YYYY', 'M/D/YYYY', 'M/D/YY', 'MM/DD/YYYY', 'MM YYYY', 'MMM D, YYYY', 'ISODATE', 'raw'
         */
        "valueFormat": TickFormatProp;
        /**
          * Set Value metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then valueMetric = 'make'.
         */
        "valueMetric": string;
    }
    interface NexusPinEntry {
        /**
          * Whether the pin is disabled
         */
        "disabled": boolean;
        /**
          * Length of pin entry
         */
        "length": number;
        /**
          * Type for pin entry, e.g. text, password
         */
        "type": 'text' | 'password' | 'tel';
    }
    interface NexusProgressBar {
        /**
          * Indicates if the progress indicator should be a circle instead of a bar.
         */
        "circle": boolean;
        /**
          * Indicates if the progress bar should present its error state.
         */
        "error": boolean;
        /**
          * Indicates if progress value should be ignored and the value indeterminate.
         */
        "indeterminate": boolean;
        /**
          * Sets the current progress percentage out of 100 for the bar.
         */
        "value": number;
    }
    interface NexusProgressBarLabel {
    }
    interface NexusRadio {
        /**
          * The unique id of the radio.
         */
        "attrId": string;
        /**
          * Whether the radio is checked.
         */
        "checked": boolean;
        /**
          * Whether the radio is disabled.
         */
        "disabled": boolean;
        /**
          * The name of the radio group.
         */
        "name": string;
        /**
          * Whether the radio is required.
         */
        "required": boolean;
        /**
          * The value of the radio.
         */
        "value": string;
    }
    interface NexusSearch {
        /**
          * time interval for the event listner.
         */
        "debounceInterval": number;
    }
    interface NexusSearchList {
    }
    interface NexusSearchListItem {
    }
    interface NexusSelect {
        /**
          * The Unique identifier for the select and the label to match. If none is provided one will be added by default.
         */
        "attrId": string;
        /**
          * The default selected option.
         */
        "delimiter": string;
        /**
          * Whether the select is disabled.
         */
        "disabled": boolean;
        /**
          * Multipe option selection.
         */
        "multiple": boolean;
        /**
          * Short hint that describes the expected value of an input
         */
        "placeholder": string;
        /**
          * Whether the select is required.
         */
        "required": boolean;
        /**
          * Whether the select is native
         */
        "type": 'native' | 'custom';
        /**
          * The default selected option.
         */
        "value": string;
    }
    interface NexusSlider {
        /**
          * A unique identifier for the slider and the label to match. If none is provided one will be added by default.
         */
        "attrId": string;
        /**
          * Whether the form control is disabled
         */
        "disabled": boolean;
        /**
          * Maximum length of slider value
         */
        "max": number;
        /**
          * Minimum length of slider value
         */
        "min": number;
        /**
          * Whether the form control is required
         */
        "required": boolean;
    }
    interface NexusStackedBarChart {
        /**
          * label font size
         */
        "axisLabelFontSize": number;
        /**
          * Tick font family. Valid values are 'interstate', 'sans', 'serif' and 'monospace'.
         */
        "axisTickFontFamily": axisTickFontFamilyProp;
        /**
          * Tick font size. Valid values are 8, 9, 10, 12.
         */
        "axisTickFontSize": axisTickFontSizeProp;
        /**
          * Bar edge color. Valid values are 'transparent', 'black', 'white' and 'gray'.
         */
        "barStroke": barStrokeProp;
        /**
          * Bar stroke width. Valid values are 'none', 1, 2 and 5.
         */
        "barStrokeWidth": strokeWidthProp;
        /**
          * Canvas Height
         */
        "canvasHeight": number;
        /**
          * Canvas Width
         */
        "canvasWidth": number;
        /**
          * Nexus stacked bar chart props
         */
        "chartData": NexusStackedBarChartProps;
        /**
          * Chart unique Identifier
         */
        "chartId": string;
        /**
          * Chart color scheme. Valid values are 'category10', 'accent', "paired", 'set1', 'set2', 'set3', 'black' and 'gray'.
         */
        "colorScheme": colorSchemeProp;
        /**
          * Show/Hide grid lines. Default value is 'false'.
         */
        "gridlines": boolean;
        /**
          * Hide X-Axis. Default value is 'false'.
         */
        "hideXAxis": boolean;
        /**
          * Hide X-Ticks. Default value is 'false'.
         */
        "hideXTicks": boolean;
        /**
          * Hide Y-Axis. Default value is 'false'.
         */
        "hideYAxis": boolean;
        /**
          * Hide X-Ticks. Default value is 'false'.
         */
        "hideYTicks": boolean;
        /**
          * Invert background colors. Default value is 'false'
         */
        "inverse": boolean;
        /**
          * Show/Hide legend. Default value is 'true'.
         */
        "legend": boolean;
        /**
          * Set legend font size. Default value is 12, Valid values are 10, 14
         */
        "legendFontSize": legendFontSizeProp;
        /**
          * Set legend width.
         */
        "legendWidth": number;
        /**
          * Set linear domain. Default value is 'absolute'. Valid values are 'absolute' and 'percentage'.
         */
        "linearDomain": string;
        /**
          * Set linear metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then linearMetric = 'make'.
         */
        "linearMetric": string;
        /**
          * Set linear tick format. Valid values are 'USD', 'localestring', 'localestring1d', 'localestring2d', 'percent', 'percent1d', 'percent2d', 'YYYY', 'M/D/YYYY', 'M/D/YY', 'MM/DD/YYYY', 'MM YYYY', 'MMM D, YYYY', 'ISODATE', 'raw'
         */
        "linearTickFormat": TickFormatProp;
        /**
          * Canvas margin bottom offset. Default value is 25.
         */
        "marginBottom": number;
        /**
          * Canvas margin left offset. Default value is 25.
         */
        "marginLeft": number;
        /**
          * Canvas margin right offset. Default value is 25.
         */
        "marginRight": number;
        /**
          * Canvas margin top offset. Default value is 25.
         */
        "marginTop": number;
        /**
          * Maximum Bar width. Default value is 75.
         */
        "maxBarWidth": number;
        /**
          * Set ordinal metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then ordinalMetric = 'make'.
         */
        "ordinalMetric": string;
        /**
          * Orientation of the graph. Default value is 'vertical'. Valid values are 'horizontal' and 'vertical'.
         */
        "orientation": orientationProp;
        /**
          * Is graph responsive. Default value is 'true'.
         */
        "responsive": boolean;
        /**
          * Set series metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then seriesMetric = 'make'.
         */
        "seriesMetric": string;
        /**
          * Should show/hide tooltips. Default value is 'true'.
         */
        "tooltips": boolean;
        /**
          * Label on x-axis. Default value is ''.
         */
        "xLabel": string;
        /**
          * X-axis tick size.
         */
        "xTickSize": number;
        /**
          * Label on y-axis. Default value is ''.
         */
        "yLabel": string;
        /**
          * Y-axis tick size.
         */
        "yTickSize": number;
    }
    interface NexusStepper {
        /**
          * Type of the Stepper (row / column) - Default is row. colummn is in Development
         */
        "steppertype": 'row' | 'column';
    }
    interface NexusStepperItem {
        "setPropsValue": (value: any, index: any) => Promise<void>;
        /**
          * current status of the step
         */
        "status": 'complete' | 'active' | 'warning' | 'error' | 'default' | 'skipped';
    }
    interface NexusTabBar {
    }
    interface NexusTable {
        /**
          * Nexus table id
         */
        "attrId": string;
        /**
          * Table Header Data
         */
        "columns": any;
        /**
          * Current Page
         */
        "currentPage": number;
        /**
          * Page size options dropdown visibility
         */
        "enablePageSizeOption": boolean;
        /**
          * Pass height of the table(in px)
         */
        "maxHeight": string;
        /**
          * Default page size.
         */
        "pageSize": number;
        /**
          * Table footer page size lable.
         */
        "pageSizeLabel": string;
        /**
          * Page size options dropdown.
         */
        "pageSizeOpt": number[];
        /**
          * Show/Hide table row pagination.
         */
        "pagination": boolean;
        /**
          * Table row selection.
         */
        "rowSelection": boolean;
        /**
          * Row data for table content.
         */
        "rows": any[];
        /**
          * Column Sort Icon - Ascending order.
         */
        "sortAscIcon": string;
        /**
          * Column Sort Icon - Neutral state.
         */
        "sortDefaultIcon": string;
        /**
          * Column Sort Icon - Descending order.
         */
        "sortDescIcon": string;
        /**
          * Pass height of the table(in px)
         */
        "totalItems": number;
        /**
          * Table Type selection
         */
        "type": tableVariant;
    }
    interface NexusTextarea {
        /**
          * The unique identifier for the input and the label to match. If none is provided one will be added by default.
         */
        "attrId": string;
        /**
          * Specifies the visible width of a text area
         */
        "cols": number;
        /**
          * Set the property disabled as true to stop editing the text area
         */
        "disabled": boolean;
        /**
          * Maximum length (number of characters) of value
         */
        "maxLength": number;
        /**
          * Minimum length (number of characters) of value
         */
        "minLength": number;
        /**
          * Placehlder text for the textarea
         */
        "placeholder": string;
        /**
          * Whether the form control is required
         */
        "required": boolean;
        /**
          * Specifies the visible number of lines in a text area
         */
        "rows": number;
        /**
          * The value of the input
         */
        "value": string;
    }
    interface NexusToast {
        /**
          * Trigger automatic close of toast after n milli-seconds
         */
        "autoClose": number;
        /**
          * Whether the toast can be closed.
         */
        "closeable": boolean;
        /**
          * custom icon for toast
         */
        "iconSrc": string;
        /**
          * The position of the toast
         */
        "position": 'top' | 'bottom';
        /**
          * Hide toasts when set to false.
         */
        "show": boolean;
        /**
          * The style of the toast.
         */
        "variant": typVariant1;
    }
    interface NexusToggle {
        /**
          * The unique identifier of the toggle.
         */
        "attrId": string;
        /**
          * Whether the toggle is disabled.
         */
        "disabled": boolean;
        /**
          * Set label to be dispayed on right hand side of toggle.
         */
        "labelActive": string;
        /**
          * Set label to be dispayed on left hand side of toggle.
         */
        "labelInactive": string;
        /**
          * Whether the toggle is required.
         */
        "required": boolean;
        /**
          * Set size for the toggle. size variants represented as width x height [ xs = 32px x 16px, sm = 48px x 24px, md = 80px x 40px, lg = 112px x 56px, xl = 128px x 64px ]
         */
        "size": typSize;
        /**
          * Whether the toggle is on or off.
         */
        "toggled": boolean;
        /**
          * Toggle type, switch by default.
         */
        "type": 'switch' | 'button';
        /**
          * Set the value for toggle based on toggle identifier.
         */
        "value": string;
    }
    interface NexusTooltip {
        /**
          * Allows tooltip to persist on click to trigger.
         */
        "allowClick": boolean;
        /**
          * The Unique identifier for the tooltip. If none is provided one will be added by default.
         */
        "attrId": string;
        /**
          * Position of the tooltip (top, right, bottom, left). If nothing is provided, it will be calculated based on the screen size.
         */
        "placement": 'top' | 'bottom' | 'left' | 'right' | '';
    }
    interface NexusTooltipContent {
        /**
          * Internal method for showing tooltip content
          * @param positions
          * @param id
         */
        "_show": (positions: any, id: any) => Promise<void>;
    }
    interface NexusTooltipTrigger {
    }
    interface NexusTree {
        /**
          * Whether the tree is open
         */
        "open": boolean;
    }
    interface NexusTreeContent {
    }
    interface NexusTreeTrigger {
    }
}
export interface NexusAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusAccordionElement;
}
export interface NexusAccordionTriggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusAccordionTriggerElement;
}
export interface NexusBarChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusBarChartElement;
}
export interface NexusChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusChipElement;
}
export interface NexusDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusDropdownElement;
}
export interface NexusFileUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusFileUploadElement;
}
export interface NexusInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusInputElement;
}
export interface NexusLineChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusLineChartElement;
}
export interface NexusMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusMenuElement;
}
export interface NexusModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusModalElement;
}
export interface NexusModalHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusModalHeaderElement;
}
export interface NexusOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusOptionElement;
}
export interface NexusPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusPaginationElement;
}
export interface NexusPieChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusPieChartElement;
}
export interface NexusPinEntryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusPinEntryElement;
}
export interface NexusSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusSelectElement;
}
export interface NexusSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusSliderElement;
}
export interface NexusStackedBarChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusStackedBarChartElement;
}
export interface NexusTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusTableElement;
}
export interface NexusTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusTextareaElement;
}
export interface NexusToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusToastElement;
}
export interface NexusTooltipContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusTooltipContentElement;
}
export interface NexusTreeTriggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNexusTreeTriggerElement;
}
declare global {
    interface HTMLNexusAccordionElement extends Components.NexusAccordion, HTMLStencilElement {
    }
    var HTMLNexusAccordionElement: {
        prototype: HTMLNexusAccordionElement;
        new (): HTMLNexusAccordionElement;
    };
    interface HTMLNexusAccordionContentElement extends Components.NexusAccordionContent, HTMLStencilElement {
    }
    var HTMLNexusAccordionContentElement: {
        prototype: HTMLNexusAccordionContentElement;
        new (): HTMLNexusAccordionContentElement;
    };
    interface HTMLNexusAccordionGroupElement extends Components.NexusAccordionGroup, HTMLStencilElement {
    }
    var HTMLNexusAccordionGroupElement: {
        prototype: HTMLNexusAccordionGroupElement;
        new (): HTMLNexusAccordionGroupElement;
    };
    interface HTMLNexusAccordionTriggerElement extends Components.NexusAccordionTrigger, HTMLStencilElement {
    }
    var HTMLNexusAccordionTriggerElement: {
        prototype: HTMLNexusAccordionTriggerElement;
        new (): HTMLNexusAccordionTriggerElement;
    };
    interface HTMLNexusAvatarElement extends Components.NexusAvatar, HTMLStencilElement {
    }
    var HTMLNexusAvatarElement: {
        prototype: HTMLNexusAvatarElement;
        new (): HTMLNexusAvatarElement;
    };
    interface HTMLNexusBadgeElement extends Components.NexusBadge, HTMLStencilElement {
    }
    var HTMLNexusBadgeElement: {
        prototype: HTMLNexusBadgeElement;
        new (): HTMLNexusBadgeElement;
    };
    interface HTMLNexusBarChartElement extends Components.NexusBarChart, HTMLStencilElement {
    }
    var HTMLNexusBarChartElement: {
        prototype: HTMLNexusBarChartElement;
        new (): HTMLNexusBarChartElement;
    };
    interface HTMLNexusBreadcrumbElement extends Components.NexusBreadcrumb, HTMLStencilElement {
    }
    var HTMLNexusBreadcrumbElement: {
        prototype: HTMLNexusBreadcrumbElement;
        new (): HTMLNexusBreadcrumbElement;
    };
    interface HTMLNexusBreadcrumbItemElement extends Components.NexusBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLNexusBreadcrumbItemElement: {
        prototype: HTMLNexusBreadcrumbItemElement;
        new (): HTMLNexusBreadcrumbItemElement;
    };
    interface HTMLNexusCardElement extends Components.NexusCard, HTMLStencilElement {
    }
    var HTMLNexusCardElement: {
        prototype: HTMLNexusCardElement;
        new (): HTMLNexusCardElement;
    };
    interface HTMLNexusCardAvatarElement extends Components.NexusCardAvatar, HTMLStencilElement {
    }
    var HTMLNexusCardAvatarElement: {
        prototype: HTMLNexusCardAvatarElement;
        new (): HTMLNexusCardAvatarElement;
    };
    interface HTMLNexusCardBodyElement extends Components.NexusCardBody, HTMLStencilElement {
    }
    var HTMLNexusCardBodyElement: {
        prototype: HTMLNexusCardBodyElement;
        new (): HTMLNexusCardBodyElement;
    };
    interface HTMLNexusCardBodyImageElement extends Components.NexusCardBodyImage, HTMLStencilElement {
    }
    var HTMLNexusCardBodyImageElement: {
        prototype: HTMLNexusCardBodyImageElement;
        new (): HTMLNexusCardBodyImageElement;
    };
    interface HTMLNexusCardFooterElement extends Components.NexusCardFooter, HTMLStencilElement {
    }
    var HTMLNexusCardFooterElement: {
        prototype: HTMLNexusCardFooterElement;
        new (): HTMLNexusCardFooterElement;
    };
    interface HTMLNexusCardHeaderElement extends Components.NexusCardHeader, HTMLStencilElement {
    }
    var HTMLNexusCardHeaderElement: {
        prototype: HTMLNexusCardHeaderElement;
        new (): HTMLNexusCardHeaderElement;
    };
    interface HTMLNexusCardHeaderButtonElement extends Components.NexusCardHeaderButton, HTMLStencilElement {
    }
    var HTMLNexusCardHeaderButtonElement: {
        prototype: HTMLNexusCardHeaderButtonElement;
        new (): HTMLNexusCardHeaderButtonElement;
    };
    interface HTMLNexusCardHeaderDetailsElement extends Components.NexusCardHeaderDetails, HTMLStencilElement {
    }
    var HTMLNexusCardHeaderDetailsElement: {
        prototype: HTMLNexusCardHeaderDetailsElement;
        new (): HTMLNexusCardHeaderDetailsElement;
    };
    interface HTMLNexusCardHeaderSubtitleElement extends Components.NexusCardHeaderSubtitle, HTMLStencilElement {
    }
    var HTMLNexusCardHeaderSubtitleElement: {
        prototype: HTMLNexusCardHeaderSubtitleElement;
        new (): HTMLNexusCardHeaderSubtitleElement;
    };
    interface HTMLNexusCardHeaderTitleElement extends Components.NexusCardHeaderTitle, HTMLStencilElement {
    }
    var HTMLNexusCardHeaderTitleElement: {
        prototype: HTMLNexusCardHeaderTitleElement;
        new (): HTMLNexusCardHeaderTitleElement;
    };
    interface HTMLNexusCarouselElement extends Components.NexusCarousel, HTMLStencilElement {
    }
    var HTMLNexusCarouselElement: {
        prototype: HTMLNexusCarouselElement;
        new (): HTMLNexusCarouselElement;
    };
    interface HTMLNexusCarouselItemElement extends Components.NexusCarouselItem, HTMLStencilElement {
    }
    var HTMLNexusCarouselItemElement: {
        prototype: HTMLNexusCarouselItemElement;
        new (): HTMLNexusCarouselItemElement;
    };
    interface HTMLNexusChartsElement extends Components.NexusCharts, HTMLStencilElement {
    }
    var HTMLNexusChartsElement: {
        prototype: HTMLNexusChartsElement;
        new (): HTMLNexusChartsElement;
    };
    interface HTMLNexusCheckboxElement extends Components.NexusCheckbox, HTMLStencilElement {
    }
    var HTMLNexusCheckboxElement: {
        prototype: HTMLNexusCheckboxElement;
        new (): HTMLNexusCheckboxElement;
    };
    interface HTMLNexusChipElement extends Components.NexusChip, HTMLStencilElement {
    }
    var HTMLNexusChipElement: {
        prototype: HTMLNexusChipElement;
        new (): HTMLNexusChipElement;
    };
    interface HTMLNexusChipGroupElement extends Components.NexusChipGroup, HTMLStencilElement {
    }
    var HTMLNexusChipGroupElement: {
        prototype: HTMLNexusChipGroupElement;
        new (): HTMLNexusChipGroupElement;
    };
    interface HTMLNexusDropdownElement extends Components.NexusDropdown, HTMLStencilElement {
    }
    var HTMLNexusDropdownElement: {
        prototype: HTMLNexusDropdownElement;
        new (): HTMLNexusDropdownElement;
    };
    interface HTMLNexusErrorMessageElement extends Components.NexusErrorMessage, HTMLStencilElement {
    }
    var HTMLNexusErrorMessageElement: {
        prototype: HTMLNexusErrorMessageElement;
        new (): HTMLNexusErrorMessageElement;
    };
    interface HTMLNexusFileUploadElement extends Components.NexusFileUpload, HTMLStencilElement {
    }
    var HTMLNexusFileUploadElement: {
        prototype: HTMLNexusFileUploadElement;
        new (): HTMLNexusFileUploadElement;
    };
    interface HTMLNexusFooterElement extends Components.NexusFooter, HTMLStencilElement {
    }
    var HTMLNexusFooterElement: {
        prototype: HTMLNexusFooterElement;
        new (): HTMLNexusFooterElement;
    };
    interface HTMLNexusFooterBottomElement extends Components.NexusFooterBottom, HTMLStencilElement {
    }
    var HTMLNexusFooterBottomElement: {
        prototype: HTMLNexusFooterBottomElement;
        new (): HTMLNexusFooterBottomElement;
    };
    interface HTMLNexusFooterColumnElement extends Components.NexusFooterColumn, HTMLStencilElement {
    }
    var HTMLNexusFooterColumnElement: {
        prototype: HTMLNexusFooterColumnElement;
        new (): HTMLNexusFooterColumnElement;
    };
    interface HTMLNexusFooterContentElement extends Components.NexusFooterContent, HTMLStencilElement {
    }
    var HTMLNexusFooterContentElement: {
        prototype: HTMLNexusFooterContentElement;
        new (): HTMLNexusFooterContentElement;
    };
    interface HTMLNexusFooterContentTitleElement extends Components.NexusFooterContentTitle, HTMLStencilElement {
    }
    var HTMLNexusFooterContentTitleElement: {
        prototype: HTMLNexusFooterContentTitleElement;
        new (): HTMLNexusFooterContentTitleElement;
    };
    interface HTMLNexusFooterLogoElement extends Components.NexusFooterLogo, HTMLStencilElement {
    }
    var HTMLNexusFooterLogoElement: {
        prototype: HTMLNexusFooterLogoElement;
        new (): HTMLNexusFooterLogoElement;
    };
    interface HTMLNexusFormFieldElement extends Components.NexusFormField, HTMLStencilElement {
    }
    var HTMLNexusFormFieldElement: {
        prototype: HTMLNexusFormFieldElement;
        new (): HTMLNexusFormFieldElement;
    };
    interface HTMLNexusHeaderElement extends Components.NexusHeader, HTMLStencilElement {
    }
    var HTMLNexusHeaderElement: {
        prototype: HTMLNexusHeaderElement;
        new (): HTMLNexusHeaderElement;
    };
    interface HTMLNexusHeaderLogoElement extends Components.NexusHeaderLogo, HTMLStencilElement {
    }
    var HTMLNexusHeaderLogoElement: {
        prototype: HTMLNexusHeaderLogoElement;
        new (): HTMLNexusHeaderLogoElement;
    };
    interface HTMLNexusHeaderMenuElement extends Components.NexusHeaderMenu, HTMLStencilElement {
    }
    var HTMLNexusHeaderMenuElement: {
        prototype: HTMLNexusHeaderMenuElement;
        new (): HTMLNexusHeaderMenuElement;
    };
    interface HTMLNexusIconElement extends Components.NexusIcon, HTMLStencilElement {
    }
    var HTMLNexusIconElement: {
        prototype: HTMLNexusIconElement;
        new (): HTMLNexusIconElement;
    };
    interface HTMLNexusInputElement extends Components.NexusInput, HTMLStencilElement {
    }
    var HTMLNexusInputElement: {
        prototype: HTMLNexusInputElement;
        new (): HTMLNexusInputElement;
    };
    interface HTMLNexusLabelElement extends Components.NexusLabel, HTMLStencilElement {
    }
    var HTMLNexusLabelElement: {
        prototype: HTMLNexusLabelElement;
        new (): HTMLNexusLabelElement;
    };
    interface HTMLNexusLineChartElement extends Components.NexusLineChart, HTMLStencilElement {
    }
    var HTMLNexusLineChartElement: {
        prototype: HTMLNexusLineChartElement;
        new (): HTMLNexusLineChartElement;
    };
    interface HTMLNexusLoaderElement extends Components.NexusLoader, HTMLStencilElement {
    }
    var HTMLNexusLoaderElement: {
        prototype: HTMLNexusLoaderElement;
        new (): HTMLNexusLoaderElement;
    };
    interface HTMLNexusMenuElement extends Components.NexusMenu, HTMLStencilElement {
    }
    var HTMLNexusMenuElement: {
        prototype: HTMLNexusMenuElement;
        new (): HTMLNexusMenuElement;
    };
    interface HTMLNexusMenuItemElement extends Components.NexusMenuItem, HTMLStencilElement {
    }
    var HTMLNexusMenuItemElement: {
        prototype: HTMLNexusMenuItemElement;
        new (): HTMLNexusMenuItemElement;
    };
    interface HTMLNexusMessageElement extends Components.NexusMessage, HTMLStencilElement {
    }
    var HTMLNexusMessageElement: {
        prototype: HTMLNexusMessageElement;
        new (): HTMLNexusMessageElement;
    };
    interface HTMLNexusModalElement extends Components.NexusModal, HTMLStencilElement {
    }
    var HTMLNexusModalElement: {
        prototype: HTMLNexusModalElement;
        new (): HTMLNexusModalElement;
    };
    interface HTMLNexusModalBodyElement extends Components.NexusModalBody, HTMLStencilElement {
    }
    var HTMLNexusModalBodyElement: {
        prototype: HTMLNexusModalBodyElement;
        new (): HTMLNexusModalBodyElement;
    };
    interface HTMLNexusModalFooterElement extends Components.NexusModalFooter, HTMLStencilElement {
    }
    var HTMLNexusModalFooterElement: {
        prototype: HTMLNexusModalFooterElement;
        new (): HTMLNexusModalFooterElement;
    };
    interface HTMLNexusModalHeaderElement extends Components.NexusModalHeader, HTMLStencilElement {
    }
    var HTMLNexusModalHeaderElement: {
        prototype: HTMLNexusModalHeaderElement;
        new (): HTMLNexusModalHeaderElement;
    };
    interface HTMLNexusModalHeaderSubtitleElement extends Components.NexusModalHeaderSubtitle, HTMLStencilElement {
    }
    var HTMLNexusModalHeaderSubtitleElement: {
        prototype: HTMLNexusModalHeaderSubtitleElement;
        new (): HTMLNexusModalHeaderSubtitleElement;
    };
    interface HTMLNexusNotificationElement extends Components.NexusNotification, HTMLStencilElement {
    }
    var HTMLNexusNotificationElement: {
        prototype: HTMLNexusNotificationElement;
        new (): HTMLNexusNotificationElement;
    };
    interface HTMLNexusOptionElement extends Components.NexusOption, HTMLStencilElement {
    }
    var HTMLNexusOptionElement: {
        prototype: HTMLNexusOptionElement;
        new (): HTMLNexusOptionElement;
    };
    interface HTMLNexusPaginationElement extends Components.NexusPagination, HTMLStencilElement {
    }
    var HTMLNexusPaginationElement: {
        prototype: HTMLNexusPaginationElement;
        new (): HTMLNexusPaginationElement;
    };
    interface HTMLNexusPieChartElement extends Components.NexusPieChart, HTMLStencilElement {
    }
    var HTMLNexusPieChartElement: {
        prototype: HTMLNexusPieChartElement;
        new (): HTMLNexusPieChartElement;
    };
    interface HTMLNexusPinEntryElement extends Components.NexusPinEntry, HTMLStencilElement {
    }
    var HTMLNexusPinEntryElement: {
        prototype: HTMLNexusPinEntryElement;
        new (): HTMLNexusPinEntryElement;
    };
    interface HTMLNexusProgressBarElement extends Components.NexusProgressBar, HTMLStencilElement {
    }
    var HTMLNexusProgressBarElement: {
        prototype: HTMLNexusProgressBarElement;
        new (): HTMLNexusProgressBarElement;
    };
    interface HTMLNexusProgressBarLabelElement extends Components.NexusProgressBarLabel, HTMLStencilElement {
    }
    var HTMLNexusProgressBarLabelElement: {
        prototype: HTMLNexusProgressBarLabelElement;
        new (): HTMLNexusProgressBarLabelElement;
    };
    interface HTMLNexusRadioElement extends Components.NexusRadio, HTMLStencilElement {
    }
    var HTMLNexusRadioElement: {
        prototype: HTMLNexusRadioElement;
        new (): HTMLNexusRadioElement;
    };
    interface HTMLNexusSearchElement extends Components.NexusSearch, HTMLStencilElement {
    }
    var HTMLNexusSearchElement: {
        prototype: HTMLNexusSearchElement;
        new (): HTMLNexusSearchElement;
    };
    interface HTMLNexusSearchListElement extends Components.NexusSearchList, HTMLStencilElement {
    }
    var HTMLNexusSearchListElement: {
        prototype: HTMLNexusSearchListElement;
        new (): HTMLNexusSearchListElement;
    };
    interface HTMLNexusSearchListItemElement extends Components.NexusSearchListItem, HTMLStencilElement {
    }
    var HTMLNexusSearchListItemElement: {
        prototype: HTMLNexusSearchListItemElement;
        new (): HTMLNexusSearchListItemElement;
    };
    interface HTMLNexusSelectElement extends Components.NexusSelect, HTMLStencilElement {
    }
    var HTMLNexusSelectElement: {
        prototype: HTMLNexusSelectElement;
        new (): HTMLNexusSelectElement;
    };
    interface HTMLNexusSliderElement extends Components.NexusSlider, HTMLStencilElement {
    }
    var HTMLNexusSliderElement: {
        prototype: HTMLNexusSliderElement;
        new (): HTMLNexusSliderElement;
    };
    interface HTMLNexusStackedBarChartElement extends Components.NexusStackedBarChart, HTMLStencilElement {
    }
    var HTMLNexusStackedBarChartElement: {
        prototype: HTMLNexusStackedBarChartElement;
        new (): HTMLNexusStackedBarChartElement;
    };
    interface HTMLNexusStepperElement extends Components.NexusStepper, HTMLStencilElement {
    }
    var HTMLNexusStepperElement: {
        prototype: HTMLNexusStepperElement;
        new (): HTMLNexusStepperElement;
    };
    interface HTMLNexusStepperItemElement extends Components.NexusStepperItem, HTMLStencilElement {
    }
    var HTMLNexusStepperItemElement: {
        prototype: HTMLNexusStepperItemElement;
        new (): HTMLNexusStepperItemElement;
    };
    interface HTMLNexusTabBarElement extends Components.NexusTabBar, HTMLStencilElement {
    }
    var HTMLNexusTabBarElement: {
        prototype: HTMLNexusTabBarElement;
        new (): HTMLNexusTabBarElement;
    };
    interface HTMLNexusTableElement extends Components.NexusTable, HTMLStencilElement {
    }
    var HTMLNexusTableElement: {
        prototype: HTMLNexusTableElement;
        new (): HTMLNexusTableElement;
    };
    interface HTMLNexusTextareaElement extends Components.NexusTextarea, HTMLStencilElement {
    }
    var HTMLNexusTextareaElement: {
        prototype: HTMLNexusTextareaElement;
        new (): HTMLNexusTextareaElement;
    };
    interface HTMLNexusToastElement extends Components.NexusToast, HTMLStencilElement {
    }
    var HTMLNexusToastElement: {
        prototype: HTMLNexusToastElement;
        new (): HTMLNexusToastElement;
    };
    interface HTMLNexusToggleElement extends Components.NexusToggle, HTMLStencilElement {
    }
    var HTMLNexusToggleElement: {
        prototype: HTMLNexusToggleElement;
        new (): HTMLNexusToggleElement;
    };
    interface HTMLNexusTooltipElement extends Components.NexusTooltip, HTMLStencilElement {
    }
    var HTMLNexusTooltipElement: {
        prototype: HTMLNexusTooltipElement;
        new (): HTMLNexusTooltipElement;
    };
    interface HTMLNexusTooltipContentElement extends Components.NexusTooltipContent, HTMLStencilElement {
    }
    var HTMLNexusTooltipContentElement: {
        prototype: HTMLNexusTooltipContentElement;
        new (): HTMLNexusTooltipContentElement;
    };
    interface HTMLNexusTooltipTriggerElement extends Components.NexusTooltipTrigger, HTMLStencilElement {
    }
    var HTMLNexusTooltipTriggerElement: {
        prototype: HTMLNexusTooltipTriggerElement;
        new (): HTMLNexusTooltipTriggerElement;
    };
    interface HTMLNexusTreeElement extends Components.NexusTree, HTMLStencilElement {
    }
    var HTMLNexusTreeElement: {
        prototype: HTMLNexusTreeElement;
        new (): HTMLNexusTreeElement;
    };
    interface HTMLNexusTreeContentElement extends Components.NexusTreeContent, HTMLStencilElement {
    }
    var HTMLNexusTreeContentElement: {
        prototype: HTMLNexusTreeContentElement;
        new (): HTMLNexusTreeContentElement;
    };
    interface HTMLNexusTreeTriggerElement extends Components.NexusTreeTrigger, HTMLStencilElement {
    }
    var HTMLNexusTreeTriggerElement: {
        prototype: HTMLNexusTreeTriggerElement;
        new (): HTMLNexusTreeTriggerElement;
    };
    interface HTMLElementTagNameMap {
        "nexus-accordion": HTMLNexusAccordionElement;
        "nexus-accordion-content": HTMLNexusAccordionContentElement;
        "nexus-accordion-group": HTMLNexusAccordionGroupElement;
        "nexus-accordion-trigger": HTMLNexusAccordionTriggerElement;
        "nexus-avatar": HTMLNexusAvatarElement;
        "nexus-badge": HTMLNexusBadgeElement;
        "nexus-bar-chart": HTMLNexusBarChartElement;
        "nexus-breadcrumb": HTMLNexusBreadcrumbElement;
        "nexus-breadcrumb-item": HTMLNexusBreadcrumbItemElement;
        "nexus-card": HTMLNexusCardElement;
        "nexus-card-avatar": HTMLNexusCardAvatarElement;
        "nexus-card-body": HTMLNexusCardBodyElement;
        "nexus-card-body-image": HTMLNexusCardBodyImageElement;
        "nexus-card-footer": HTMLNexusCardFooterElement;
        "nexus-card-header": HTMLNexusCardHeaderElement;
        "nexus-card-header-button": HTMLNexusCardHeaderButtonElement;
        "nexus-card-header-details": HTMLNexusCardHeaderDetailsElement;
        "nexus-card-header-subtitle": HTMLNexusCardHeaderSubtitleElement;
        "nexus-card-header-title": HTMLNexusCardHeaderTitleElement;
        "nexus-carousel": HTMLNexusCarouselElement;
        "nexus-carousel-item": HTMLNexusCarouselItemElement;
        "nexus-charts": HTMLNexusChartsElement;
        "nexus-checkbox": HTMLNexusCheckboxElement;
        "nexus-chip": HTMLNexusChipElement;
        "nexus-chip-group": HTMLNexusChipGroupElement;
        "nexus-dropdown": HTMLNexusDropdownElement;
        "nexus-error-message": HTMLNexusErrorMessageElement;
        "nexus-file-upload": HTMLNexusFileUploadElement;
        "nexus-footer": HTMLNexusFooterElement;
        "nexus-footer-bottom": HTMLNexusFooterBottomElement;
        "nexus-footer-column": HTMLNexusFooterColumnElement;
        "nexus-footer-content": HTMLNexusFooterContentElement;
        "nexus-footer-content-title": HTMLNexusFooterContentTitleElement;
        "nexus-footer-logo": HTMLNexusFooterLogoElement;
        "nexus-form-field": HTMLNexusFormFieldElement;
        "nexus-header": HTMLNexusHeaderElement;
        "nexus-header-logo": HTMLNexusHeaderLogoElement;
        "nexus-header-menu": HTMLNexusHeaderMenuElement;
        "nexus-icon": HTMLNexusIconElement;
        "nexus-input": HTMLNexusInputElement;
        "nexus-label": HTMLNexusLabelElement;
        "nexus-line-chart": HTMLNexusLineChartElement;
        "nexus-loader": HTMLNexusLoaderElement;
        "nexus-menu": HTMLNexusMenuElement;
        "nexus-menu-item": HTMLNexusMenuItemElement;
        "nexus-message": HTMLNexusMessageElement;
        "nexus-modal": HTMLNexusModalElement;
        "nexus-modal-body": HTMLNexusModalBodyElement;
        "nexus-modal-footer": HTMLNexusModalFooterElement;
        "nexus-modal-header": HTMLNexusModalHeaderElement;
        "nexus-modal-header-subtitle": HTMLNexusModalHeaderSubtitleElement;
        "nexus-notification": HTMLNexusNotificationElement;
        "nexus-option": HTMLNexusOptionElement;
        "nexus-pagination": HTMLNexusPaginationElement;
        "nexus-pie-chart": HTMLNexusPieChartElement;
        "nexus-pin-entry": HTMLNexusPinEntryElement;
        "nexus-progress-bar": HTMLNexusProgressBarElement;
        "nexus-progress-bar-label": HTMLNexusProgressBarLabelElement;
        "nexus-radio": HTMLNexusRadioElement;
        "nexus-search": HTMLNexusSearchElement;
        "nexus-search-list": HTMLNexusSearchListElement;
        "nexus-search-list-item": HTMLNexusSearchListItemElement;
        "nexus-select": HTMLNexusSelectElement;
        "nexus-slider": HTMLNexusSliderElement;
        "nexus-stacked-bar-chart": HTMLNexusStackedBarChartElement;
        "nexus-stepper": HTMLNexusStepperElement;
        "nexus-stepper-item": HTMLNexusStepperItemElement;
        "nexus-tab-bar": HTMLNexusTabBarElement;
        "nexus-table": HTMLNexusTableElement;
        "nexus-textarea": HTMLNexusTextareaElement;
        "nexus-toast": HTMLNexusToastElement;
        "nexus-toggle": HTMLNexusToggleElement;
        "nexus-tooltip": HTMLNexusTooltipElement;
        "nexus-tooltip-content": HTMLNexusTooltipContentElement;
        "nexus-tooltip-trigger": HTMLNexusTooltipTriggerElement;
        "nexus-tree": HTMLNexusTreeElement;
        "nexus-tree-content": HTMLNexusTreeContentElement;
        "nexus-tree-trigger": HTMLNexusTreeTriggerElement;
    }
}
declare namespace LocalJSX {
    interface NexusAccordion {
        /**
          * Event fired when the accordion header button is clicked.
         */
        "onToggleEvent"?: (event: NexusAccordionCustomEvent<any>) => void;
        /**
          * Whether the accordion is open.
         */
        "open"?: boolean;
        /**
          * Adjust Accordion inner content padding left and right.
         */
        "size"?: propSize;
    }
    interface NexusAccordionContent {
        /**
          * Adjust content padding left right.
         */
        "size"?: propSize2;
    }
    interface NexusAccordionGroup {
        /**
          * Disable/Enable accordion collapse of an already open accordion when a new accordion open is triggered.
         */
        "alwaysOpen"?: boolean;
    }
    interface NexusAccordionTrigger {
        /**
          * Align header content.
         */
        "align"?: 'start' | 'center' | 'end';
        /**
          * Trigger accordion toggle events upon clicking the toggle button.
         */
        "on_triggerClick"?: (event: NexusAccordionTriggerCustomEvent<any>) => void;
    }
    interface NexusAvatar {
        /**
          * Specify a custom class to override styles of the Avatar component.
         */
        "avatarClassName"?: string;
        /**
          * Avatar dark mode.
         */
        "avatarDark"?: boolean;
        /**
          * Specifies the path to the image.
         */
        "avatarImageSrc"?: string;
        /**
          * Avatar logo icon.
         */
        "avatarLogoIcon"?: string;
        /**
          * Avatar name display.
         */
        "avatarNameDisplay"?: boolean;
        /**
          * Avatar notification icon.
         */
        "avatarNotification"?: string;
        /**
          * Avatar Size.
         */
        "avatarSize"?: string;
        /**
          * Avatar connection status.
         */
        "avatarStatus"?: string;
        /**
          * Specifies an alternate text for an image.
         */
        "description"?: string;
        /**
          * Will be used as a description and formated as initials if no src is provided.
         */
        "userName"?: string;
    }
    interface NexusBadge {
        /**
          * Whether the badge overlaps its parent.
         */
        "overlap"?: boolean;
        /**
          * The style of the badge.
         */
        "variant"?: propVariant;
    }
    interface NexusBarChart {
        /**
          * Label font size
         */
        "axisLabelFontSize"?: number;
        /**
          * Tick font family.
         */
        "axisTickFontFamily"?: axisTickFontFamilyProp;
        /**
          * Tick font size. Valid values are 8, 9, 10, 12.
         */
        "axisTickFontSize"?: axisTickFontSizeProp;
        /**
          * Bar edge color. Valid values are 'transparent', 'black', 'white' and 'gray'.
         */
        "barStroke"?: barStrokeProp;
        /**
          * Bar stroke width. Valid values are 'none', 1, 2 and 5.
         */
        "barStrokeWidth"?: strokeWidthProp;
        /**
          * Canvas Height
         */
        "canvasHeight"?: number;
        /**
          * Canvas Width
         */
        "canvasWidth"?: number;
        /**
          * Nexus bar chart props
         */
        "chartData"?: NexusBarChartProps[];
        /**
          * Chart unique Identifier
         */
        "chartId"?: string;
        /**
          * Chart color scheme. Valid values are 'category10', 'accent', "paired", 'set1', 'set2', 'set3', 'black' and 'gray'.
         */
        "colorScheme"?: colorSchemeProp;
        /**
          * Show/Hide grid lines. Default value is 'false'.
         */
        "gridlines"?: boolean;
        /**
          * Hide X-Axis. Default value is 'false'.
         */
        "hideXAxis"?: boolean;
        /**
          * Hide X-Ticks. Default value is 'false'.
         */
        "hideXTicks"?: boolean;
        /**
          * Hide Y-Axis. Default value is 'false'.
         */
        "hideYAxis"?: boolean;
        /**
          * Hide Y-Ticks. Default value is 'false'.
         */
        "hideYTicks"?: boolean;
        /**
          * Invert background colors. Default value is 'false'
         */
        "inverse"?: boolean;
        /**
          * Should display legend. Default value is 'true'.
         */
        "legend"?: boolean;
        /**
          * Set legend font size. Valid values are 10, 12, 14.
         */
        "legendFontSize"?: legendFontSizeProp;
        /**
          * Set legend metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then legendMetric = 'make'.
         */
        "legendMetric"?: string;
        /**
          * Set legend width.
         */
        "legendWidth"?: number;
        /**
          * Set linear metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then linearMetric = 'make'.
         */
        "linearMetric"?: string;
        /**
          * Set linear tick format. Valid values are 'USD', 'localestring', 'localestring1d', 'localestring2d', 'percent', 'percent1d', 'percent2d', 'YYYY', 'M/D/YYYY', 'M/D/YY', 'MM/DD/YYYY', 'MM YYYY', 'MMM D, YYYY', 'ISODATE', 'raw'
         */
        "linearTickFormat"?: TickFormatProp;
        /**
          * Canvas margin bottom offset. Default value is 25.
         */
        "marginBottom"?: number;
        /**
          * Canvas margin left offset. Default value is 25.
         */
        "marginLeft"?: number;
        /**
          * Canvas margin right offset. Default value is 25.
         */
        "marginRight"?: number;
        /**
          * Canvas margin top offset. Default value is 25.
         */
        "marginTop"?: number;
        /**
          * Maximum Bar width.
         */
        "maxBarWidth"?: number;
        /**
          * On load even on loading bar chart ('nexusBarChartLoaded').
         */
        "onNexusBarChartLoaded"?: (event: NexusBarChartCustomEvent<any>) => void;
        /**
          * Set ordinal metic string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then ordinalMetric = 'make'.
         */
        "ordinalMetric"?: string;
        /**
          * Orientation of the graph. Default value is 'vertical'. Valid values are 'horizontal' and 'vertical'.
         */
        "orientation"?: orientationProp;
        /**
          * Is graph responsive. Default value is 'true'.
         */
        "responsive"?: boolean;
        /**
          * show/hide tooltips. Default value is 'false'.
         */
        "tooltips"?: boolean;
        /**
          * Label on x-axis. Default value is ''.
         */
        "xLabel"?: string;
        /**
          * X-axis tick size.
         */
        "xTickSize"?: number;
        /**
          * Label on x-axis. Default value is ''.
         */
        "yLabel"?: string;
        /**
          * Y-axis tick size.
         */
        "yTickSize"?: number;
    }
    interface NexusBreadcrumb {
        /**
          * The separation between the breadcrumb items. Can pass any character.
         */
        "separator"?: string;
    }
    interface NexusBreadcrumbItem {
        /**
          * Whether the breadcrumb item is disabled.
         */
        "disabled"?: boolean;
    }
    interface NexusCard {
        /**
          * Background color of the card
         */
        "bgColor"?: string;
        /**
          * Background image path of the card
         */
        "bgImage"?: string;
        /**
          * If set to `true` the entire card will be clickable based on the anchor tag found inside the component.
         */
        "clickable"?: boolean;
        /**
          * The height to the card
         */
        "height"?: string;
    }
    interface NexusCardAvatar {
    }
    interface NexusCardBody {
    }
    interface NexusCardBodyImage {
    }
    interface NexusCardFooter {
    }
    interface NexusCardHeader {
    }
    interface NexusCardHeaderButton {
    }
    interface NexusCardHeaderDetails {
    }
    interface NexusCardHeaderSubtitle {
    }
    interface NexusCardHeaderTitle {
    }
    interface NexusCarousel {
        /**
          * Configuration options
         */
        "options"?: Config[];
    }
    interface NexusCarouselItem {
    }
    interface NexusCharts {
    }
    interface NexusCheckbox {
        /**
          * The unique identifier of the checkbox.
         */
        "attrId"?: string;
        /**
          * Whether the input is checked.
         */
        "checked"?: boolean;
        /**
          * Whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the input is in an indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * Whether the input is required.
         */
        "required"?: boolean;
    }
    interface NexusChip {
        /**
          * Whether the chip is disabled, making it unusable and unclickable.
         */
        "disabled"?: boolean;
        /**
          * Whether the chip is in a error state
         */
        "error"?: boolean;
        /**
          * Trigger removable icon click event.
         */
        "onTriggerRemovableClick"?: (event: NexusChipCustomEvent<any>) => void;
        /**
          * Whether the chip contains the "X" icon, notifying the user that they can remove that chip.
         */
        "removable"?: boolean;
        /**
          * Whether a green border is added to the chip, showing success state.
         */
        "success"?: boolean;
    }
    interface NexusChipGroup {
    }
    interface NexusDropdown {
        /**
          * Whether the dropdown is basic
         */
        "dropdownType"?: dropDownTypeProp;
        /**
          * Maximal height of dropdown
         */
        "height"?: number;
        /**
          * set the drop down position with respective offset.
          * @param top
         */
        "onCloseEvent"?: (event: NexusDropdownCustomEvent<any>) => void;
        /**
          * Whether the select is native
         */
        "placement"?: placementProp;
        /**
          * Show and hide dropdown content
         */
        "show"?: boolean;
        /**
          * Maximal width of dropdown
         */
        "width"?: number;
    }
    interface NexusErrorMessage {
    }
    interface NexusFileUpload {
        /**
          * Specifies file types the user can select from.
         */
        "accept"?: string;
        /**
          * The Unique identifier for the input and the label to match. If none is provided one will be added by default.
         */
        "attrId"?: string;
        /**
          * Whether the input is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether you can upload multiple files at once.
         */
        "multiple"?: boolean;
        /**
          * Event fired if an error occurs. IE11 does not support dynamically setting files on an input so this error will be triggered.
         */
        "onErrorEvent"?: (event: NexusFileUploadCustomEvent<any>) => void;
        /**
          * Whether the input is required.
         */
        "required"?: boolean;
    }
    interface NexusFooter {
    }
    interface NexusFooterBottom {
    }
    interface NexusFooterColumn {
    }
    interface NexusFooterContent {
    }
    interface NexusFooterContentTitle {
    }
    interface NexusFooterLogo {
    }
    interface NexusFormField {
    }
    interface NexusHeader {
    }
    interface NexusHeaderLogo {
    }
    interface NexusHeaderMenu {
    }
    interface NexusIcon {
        /**
          * Alternative text for accessibility.
         */
        "alt"?: string;
        /**
          * The precompiled content of the svg.
         */
        "content"?: string;
        /**
          * Adjust the icon size (xs = 12px, sm = 16px, md = 24px, lg = 48px, xl = 64px).
         */
        "size"?: propSize;
        /**
          * Making applied size can't changed upon re-layouting of parent container by applying min width and height value as its specified in width and height
         */
        "sizeLock"?: boolean;
        /**
          * The path to the svg. Will request the SVG.
         */
        "src"?: string;
        /**
          * Enables to load the icons using img markup, Improves performance since it uses browser cache to save image and reduces repeated calls.
         */
        "type"?: 'svg' | 'img';
    }
    interface NexusInput {
        /**
          * The Unique identifier for the input and the label to match. If none is provided one will be added by default.
         */
        "attrId"?: string;
        /**
          * Disables autocomplete
         */
        "autocomplete"?: 'off';
        /**
          * Whether the form control is disabled
         */
        "disabled"?: boolean;
        /**
          * Specify the Maximum value of the input field
         */
        "max"?: string;
        /**
          * Maximum length (number of characters) of value
         */
        "maxLength"?: number;
        /**
          * Specify the Minimum value of the input field
         */
        "min"?: string;
        /**
          * Minimum length (number of characters) of value
         */
        "minLength"?: number;
        /**
          * Internal event for updating disabled form elements
         */
        "on_disabledChange"?: (event: NexusInputCustomEvent<any>) => void;
        /**
          * Minimum length (number of characters) of value
         */
        "placeholder"?: string;
        /**
          * The readonly of the input
         */
        "readonly"?: boolean;
        /**
          * Whether the form control is required
         */
        "required"?: boolean;
        /**
          * The type of input element
         */
        "type"?: inputFieldType;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    interface NexusLabel {
    }
    interface NexusLineChart {
        /**
          * label font size
         */
        "axisLabelFontSize"?: number;
        /**
          * Tick font family. Valid values are 'interstate', 'sans', 'serif' and 'monospace'.
         */
        "axisTickFontFamily"?: axisTickFontFamilyProp;
        /**
          * Tick font size. Valid values are 8, 9, 10, 12.
         */
        "axisTickFontSize"?: axisTickFontSizeProp;
        /**
          * Canvas Height
         */
        "canvasHeight"?: number;
        /**
          * Canvas Width
         */
        "canvasWidth"?: number;
        /**
          * Nexus line chart props
         */
        "chartData"?: NexusLineChartProps;
        /**
          * Chart unique Identifier
         */
        "chartId"?: string;
        /**
          * Chart color scheme. Valid values are 'category10', 'accent', "paired", 'set1', 'set2', 'set3', 'black' and 'gray'.
         */
        "colorScheme"?: colorSchemeProp;
        /**
          * Show/Hide grid lines. Default value is 'false'.
         */
        "gridlines"?: boolean;
        /**
          * Hide X-Axis. Default value is 'false'.
         */
        "hideXAxis"?: boolean;
        /**
          * Hide X-Ticks. Default value is 'false'.
         */
        "hideXTicks"?: boolean;
        /**
          * Hide Y-Axis. Default value is 'false'.
         */
        "hideYAxis"?: boolean;
        /**
          * Hide Y-Ticks. Default value is 'false'.
         */
        "hideYTicks"?: boolean;
        /**
          * Interpolation type. Valid values are 'linear', 'basic', 'monotone', 'step-before' and 'step-after'.
         */
        "interpolation"?: interpolationProp;
        /**
          * Invert background colors. Default value is 'false'
         */
        "inverse"?: boolean;
        /**
          * Should display legend. Default value is 'true'.
         */
        "legend"?: boolean;
        /**
          * Set legend font size. Valid values are 10, 12, 14.
         */
        "legendFontSize"?: legendFontSizeProp;
        /**
          * Set legend metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then legendMetric = 'make'.
         */
        "legendMetric"?: string;
        /**
          * Set legend width.
         */
        "legendWidth"?: number;
        /**
          * Canvas margin bottom offset. Default value is 25.
         */
        "marginBottom"?: number;
        /**
          * Canvas margin left offset. Default value is 25.
         */
        "marginLeft"?: number;
        /**
          * Canvas margin right offset. Default value is 25.
         */
        "marginRight"?: number;
        /**
          * Canvas margin top offset. Default value is 25.
         */
        "marginTop"?: number;
        /**
          * On load even on loading line chart ('nexusLineChartLoaded').
         */
        "onNexusLineChartLoaded"?: (event: NexusLineChartCustomEvent<any>) => void;
        /**
          * Is graph responsive. Default value is 'true'.
         */
        "responsive"?: boolean;
        /**
          * Edge of the line graph. Valid values are 1, 2, 4 and 6.
         */
        "strokeWidth"?: strokeWidthProp;
        /**
          * Should display tooltips. Default value is 'true'.
         */
        "tooltips"?: boolean;
        /**
          * Should display vertices. Default value is 'true'.
         */
        "vertices"?: boolean;
        /**
          * X-axis label.
         */
        "xLabel"?: string;
        /**
          * Set X-axis metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then xMetric = 'make'.
         */
        "xMetric"?: string;
        /**
          * Set X-axis tick format. Valid values are 'USD', 'localestring', 'localestring1d', 'localestring2d', 'percent', 'percent1d', 'percent2d', 'YYYY', 'M/D/YYYY', 'M/D/YY', 'MM/DD/YYYY', 'MM YYYY', 'MMM D, YYYY', 'ISODATE', 'raw'
         */
        "xTickFormat"?: TickFormatProp;
        /**
          * X-axis tick size.
         */
        "xTickSize"?: number;
        /**
          * Y-axis Label.
         */
        "yLabel"?: string;
        /**
          * Set Y-axis metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then yMetric = 'make'.
         */
        "yMetric"?: string;
        /**
          * Set Y-axis tick format. Valid values are 'USD', 'localestring', 'localestring1d', 'localestring2d', 'percent', 'percent1d', 'percent2d', 'YYYY', 'M/D/YYYY', 'M/D/YY', 'MM/DD/YYYY', 'MM YYYY', 'MMM D, YYYY', 'ISODATE', 'raw'
         */
        "yTickFormat"?: TickFormatProp;
        /**
          * Y-axis tick size.
         */
        "yTickSize"?: number;
    }
    interface NexusLoader {
        /**
          * Whether the loader is fullscreen.
         */
        "fullscreen"?: boolean;
        /**
          * Whether the loader is shown.
         */
        "show"?: boolean;
    }
    interface NexusMenu {
        /**
          * Event fired when the menu is closed
         */
        "onCloseEvent"?: (event: NexusMenuCustomEvent<any>) => void;
        /**
          * Whether the menu is open
         */
        "open"?: boolean;
        /**
          * Side of the viewport to open the menu from
         */
        "position"?: 'left' | 'right';
    }
    interface NexusMenuItem {
    }
    interface NexusMessage {
    }
    interface NexusModal {
        /**
          * Whether the modal is fullscreen.
         */
        "fullscreen"?: boolean;
        /**
          * Event fired when the modal closes.
         */
        "onCloseEvent"?: (event: NexusModalCustomEvent<any>) => void;
        /**
          * Whether to show the modal.
         */
        "show"?: boolean;
        /**
          * Adjust modal width.
         */
        "size"?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full';
    }
    interface NexusModalBody {
    }
    interface NexusModalFooter {
    }
    interface NexusModalHeader {
        /**
          * Event fired when the close icon button is clicked.
         */
        "onCloseEvent"?: (event: NexusModalHeaderCustomEvent<any>) => void;
    }
    interface NexusModalHeaderSubtitle {
    }
    interface NexusNotification {
        /**
          * The type of notification
         */
        "variant"?: typVariant;
    }
    interface NexusOption {
        /**
          * Is the option disabled
         */
        "disabled"?: boolean;
        /**
          * Add hover effect if keydown is pressed
         */
        "keyhover"?: boolean;
        /**
          * Label for the option.
         */
        "label"?: string | number | boolean;
        /**
          * Multipe option selection.
         */
        "multiple"?: boolean;
        /**
          * Event fired when the option is clicked.
         */
        "onTriggerOptionSelected"?: (event: NexusOptionCustomEvent<any>) => void;
        /**
          * Is the option selected
         */
        "selected"?: boolean;
        /**
          * Value for the option selected.
         */
        "value"?: string | number | boolean;
    }
    interface NexusPagination {
        /**
          * Current Page
         */
        "current"?: number;
        /**
          * Max number of pages
         */
        "max"?: number;
        /**
          * Event fired when page is changed.
         */
        "onChangeEvent"?: (event: NexusPaginationCustomEvent<any>) => void;
    }
    interface NexusPieChart {
        /**
          * Canvas Height
         */
        "canvasHeight"?: number;
        /**
          * Canvas Width
         */
        "canvasWidth"?: number;
        /**
          * Nexus pie chart props
         */
        "chartData"?: NexusPieChartProps;
        /**
          * Chart unique Identifier
         */
        "chartId"?: string;
        /**
          * Chart color scheme. Valid values are 'category10', 'accent', "paired", 'set1', 'set2', 'set3', 'black' and 'gray'.
         */
        "colorScheme"?: colorSchemeProp;
        /**
          * Chart inner radius.
         */
        "innerRadius"?: number;
        /**
          * Invert background colors. Default value is 'false'
         */
        "inverse"?: boolean;
        /**
          * Should display legend. Default value is 'true'.
         */
        "legend"?: boolean;
        /**
          * Set legend font size. Valid values are 10, 12, 14.
         */
        "legendFontSize"?: legendFontSizeProp;
        /**
          * Set legend metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then legendMetric = 'make'.
         */
        "legendMetric"?: string;
        /**
          * Set legend width.
         */
        "legendWidth"?: number;
        /**
          * Canvas margin bottom offset. Default value is 0.
         */
        "marginBottom"?: number;
        /**
          * Canvas margin left offset. Default value is 0.
         */
        "marginLeft"?: number;
        /**
          * Canvas margin right offset. Default value is 0.
         */
        "marginRight"?: number;
        /**
          * Canvas margin top offset. Default value is 0.
         */
        "marginTop"?: number;
        /**
          * On load even on loading pie chart ('nexusPieChartLoaded').
         */
        "onNexusPieChartLoaded"?: (event: NexusPieChartCustomEvent<any>) => void;
        /**
          * Is graph responsive. Default value is 'true'.
         */
        "responsive"?: boolean;
        /**
          * Pie chart edge color. Valid values are 'transparent', 'black', 'white' and 'gray'.
         */
        "stroke"?: strokeProp;
        /**
          * Pie chart edge width. Valid values are 1, 2, 3 and 5.
         */
        "strokeWidth"?: strokeWidthProp;
        /**
          * Should display tooltips. Default value is 'true'.
         */
        "tooltips"?: boolean;
        /**
          * Set value format. Valid values are 'USD', 'localestring', 'localestring1d', 'localestring2d', 'percent', 'percent1d', 'percent2d', 'YYYY', 'M/D/YYYY', 'M/D/YY', 'MM/DD/YYYY', 'MM YYYY', 'MMM D, YYYY', 'ISODATE', 'raw'
         */
        "valueFormat"?: TickFormatProp;
        /**
          * Set Value metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then valueMetric = 'make'.
         */
        "valueMetric"?: string;
    }
    interface NexusPinEntry {
        /**
          * Whether the pin is disabled
         */
        "disabled"?: boolean;
        /**
          * Length of pin entry
         */
        "length"?: number;
        /**
          * Event fired when pin is entered.
         */
        "onPinEvent"?: (event: NexusPinEntryCustomEvent<any>) => void;
        /**
          * Type for pin entry, e.g. text, password
         */
        "type"?: 'text' | 'password' | 'tel';
    }
    interface NexusProgressBar {
        /**
          * Indicates if the progress indicator should be a circle instead of a bar.
         */
        "circle"?: boolean;
        /**
          * Indicates if the progress bar should present its error state.
         */
        "error"?: boolean;
        /**
          * Indicates if progress value should be ignored and the value indeterminate.
         */
        "indeterminate"?: boolean;
        /**
          * Sets the current progress percentage out of 100 for the bar.
         */
        "value"?: number;
    }
    interface NexusProgressBarLabel {
    }
    interface NexusRadio {
        /**
          * The unique id of the radio.
         */
        "attrId"?: string;
        /**
          * Whether the radio is checked.
         */
        "checked"?: boolean;
        /**
          * Whether the radio is disabled.
         */
        "disabled"?: boolean;
        /**
          * The name of the radio group.
         */
        "name"?: string;
        /**
          * Whether the radio is required.
         */
        "required"?: boolean;
        /**
          * The value of the radio.
         */
        "value"?: string;
    }
    interface NexusSearch {
        /**
          * time interval for the event listner.
         */
        "debounceInterval"?: number;
    }
    interface NexusSearchList {
    }
    interface NexusSearchListItem {
    }
    interface NexusSelect {
        /**
          * The Unique identifier for the select and the label to match. If none is provided one will be added by default.
         */
        "attrId"?: string;
        /**
          * The default selected option.
         */
        "delimiter"?: string;
        /**
          * Whether the select is disabled.
         */
        "disabled"?: boolean;
        /**
          * Multipe option selection.
         */
        "multiple"?: boolean;
        /**
          * Event emited when clicked outside of select
         */
        "onCloseEvent"?: (event: NexusSelectCustomEvent<any>) => void;
        /**
          * Event for updating selected option
         */
        "onTriggerSelection"?: (event: NexusSelectCustomEvent<any>) => void;
        /**
          * Internal event for updating disabled form elements
         */
        "on_disabledChange"?: (event: NexusSelectCustomEvent<any>) => void;
        /**
          * Short hint that describes the expected value of an input
         */
        "placeholder"?: string;
        /**
          * Whether the select is required.
         */
        "required"?: boolean;
        /**
          * Whether the select is native
         */
        "type"?: 'native' | 'custom';
        /**
          * The default selected option.
         */
        "value"?: string;
    }
    interface NexusSlider {
        /**
          * A unique identifier for the slider and the label to match. If none is provided one will be added by default.
         */
        "attrId"?: string;
        /**
          * Whether the form control is disabled
         */
        "disabled"?: boolean;
        /**
          * Maximum length of slider value
         */
        "max"?: number;
        /**
          * Minimum length of slider value
         */
        "min"?: number;
        /**
          * Internal event for updating disabled form elements
         */
        "on_disabledChange"?: (event: NexusSliderCustomEvent<any>) => void;
        /**
          * Whether the form control is required
         */
        "required"?: boolean;
    }
    interface NexusStackedBarChart {
        /**
          * label font size
         */
        "axisLabelFontSize"?: number;
        /**
          * Tick font family. Valid values are 'interstate', 'sans', 'serif' and 'monospace'.
         */
        "axisTickFontFamily"?: axisTickFontFamilyProp;
        /**
          * Tick font size. Valid values are 8, 9, 10, 12.
         */
        "axisTickFontSize"?: axisTickFontSizeProp;
        /**
          * Bar edge color. Valid values are 'transparent', 'black', 'white' and 'gray'.
         */
        "barStroke"?: barStrokeProp;
        /**
          * Bar stroke width. Valid values are 'none', 1, 2 and 5.
         */
        "barStrokeWidth"?: strokeWidthProp;
        /**
          * Canvas Height
         */
        "canvasHeight"?: number;
        /**
          * Canvas Width
         */
        "canvasWidth"?: number;
        /**
          * Nexus stacked bar chart props
         */
        "chartData"?: NexusStackedBarChartProps;
        /**
          * Chart unique Identifier
         */
        "chartId"?: string;
        /**
          * Chart color scheme. Valid values are 'category10', 'accent', "paired", 'set1', 'set2', 'set3', 'black' and 'gray'.
         */
        "colorScheme"?: colorSchemeProp;
        /**
          * Show/Hide grid lines. Default value is 'false'.
         */
        "gridlines"?: boolean;
        /**
          * Hide X-Axis. Default value is 'false'.
         */
        "hideXAxis"?: boolean;
        /**
          * Hide X-Ticks. Default value is 'false'.
         */
        "hideXTicks"?: boolean;
        /**
          * Hide Y-Axis. Default value is 'false'.
         */
        "hideYAxis"?: boolean;
        /**
          * Hide X-Ticks. Default value is 'false'.
         */
        "hideYTicks"?: boolean;
        /**
          * Invert background colors. Default value is 'false'
         */
        "inverse"?: boolean;
        /**
          * Show/Hide legend. Default value is 'true'.
         */
        "legend"?: boolean;
        /**
          * Set legend font size. Default value is 12, Valid values are 10, 14
         */
        "legendFontSize"?: legendFontSizeProp;
        /**
          * Set legend width.
         */
        "legendWidth"?: number;
        /**
          * Set linear domain. Default value is 'absolute'. Valid values are 'absolute' and 'percentage'.
         */
        "linearDomain"?: string;
        /**
          * Set linear metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then linearMetric = 'make'.
         */
        "linearMetric"?: string;
        /**
          * Set linear tick format. Valid values are 'USD', 'localestring', 'localestring1d', 'localestring2d', 'percent', 'percent1d', 'percent2d', 'YYYY', 'M/D/YYYY', 'M/D/YY', 'MM/DD/YYYY', 'MM YYYY', 'MMM D, YYYY', 'ISODATE', 'raw'
         */
        "linearTickFormat"?: TickFormatProp;
        /**
          * Canvas margin bottom offset. Default value is 25.
         */
        "marginBottom"?: number;
        /**
          * Canvas margin left offset. Default value is 25.
         */
        "marginLeft"?: number;
        /**
          * Canvas margin right offset. Default value is 25.
         */
        "marginRight"?: number;
        /**
          * Canvas margin top offset. Default value is 25.
         */
        "marginTop"?: number;
        /**
          * Maximum Bar width. Default value is 75.
         */
        "maxBarWidth"?: number;
        /**
          * On load even on loading stacked bar chart ('nexusStackedBarChartLoaded').
         */
        "onNexusStackedBarChartLoaded"?: (event: NexusStackedBarChartCustomEvent<any>) => void;
        /**
          * Set ordinal metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then ordinalMetric = 'make'.
         */
        "ordinalMetric"?: string;
        /**
          * Orientation of the graph. Default value is 'vertical'. Valid values are 'horizontal' and 'vertical'.
         */
        "orientation"?: orientationProp;
        /**
          * Is graph responsive. Default value is 'true'.
         */
        "responsive"?: boolean;
        /**
          * Set series metric string to key from your data set. For example: dataSet = [{ make: 'Volkswagen', model: 'ID4', year: '2020', }]  Then seriesMetric = 'make'.
         */
        "seriesMetric"?: string;
        /**
          * Should show/hide tooltips. Default value is 'true'.
         */
        "tooltips"?: boolean;
        /**
          * Label on x-axis. Default value is ''.
         */
        "xLabel"?: string;
        /**
          * X-axis tick size.
         */
        "xTickSize"?: number;
        /**
          * Label on y-axis. Default value is ''.
         */
        "yLabel"?: string;
        /**
          * Y-axis tick size.
         */
        "yTickSize"?: number;
    }
    interface NexusStepper {
        /**
          * Type of the Stepper (row / column) - Default is row. colummn is in Development
         */
        "steppertype"?: 'row' | 'column';
    }
    interface NexusStepperItem {
        /**
          * current status of the step
         */
        "status"?: 'complete' | 'active' | 'warning' | 'error' | 'default' | 'skipped';
    }
    interface NexusTabBar {
    }
    interface NexusTable {
        /**
          * Nexus table id
         */
        "attrId"?: string;
        /**
          * Table Header Data
         */
        "columns"?: any;
        /**
          * Current Page
         */
        "currentPage"?: number;
        /**
          * Page size options dropdown visibility
         */
        "enablePageSizeOption"?: boolean;
        /**
          * Pass height of the table(in px)
         */
        "maxHeight"?: string;
        /**
          * Emit list of selected rows
         */
        "onRowSelect"?: (event: NexusTableCustomEvent<any[]>) => void;
        /**
          * Emit current page details on table data change
         */
        "onTableChangeEvent"?: (event: NexusTableCustomEvent<any>) => void;
        /**
          * Default page size.
         */
        "pageSize"?: number;
        /**
          * Table footer page size lable.
         */
        "pageSizeLabel"?: string;
        /**
          * Page size options dropdown.
         */
        "pageSizeOpt"?: number[];
        /**
          * Show/Hide table row pagination.
         */
        "pagination"?: boolean;
        /**
          * Table row selection.
         */
        "rowSelection"?: boolean;
        /**
          * Row data for table content.
         */
        "rows"?: any[];
        /**
          * Column Sort Icon - Ascending order.
         */
        "sortAscIcon"?: string;
        /**
          * Column Sort Icon - Neutral state.
         */
        "sortDefaultIcon"?: string;
        /**
          * Column Sort Icon - Descending order.
         */
        "sortDescIcon"?: string;
        /**
          * Pass height of the table(in px)
         */
        "totalItems"?: number;
        /**
          * Table Type selection
         */
        "type"?: tableVariant;
    }
    interface NexusTextarea {
        /**
          * The unique identifier for the input and the label to match. If none is provided one will be added by default.
         */
        "attrId"?: string;
        /**
          * Specifies the visible width of a text area
         */
        "cols"?: number;
        /**
          * Set the property disabled as true to stop editing the text area
         */
        "disabled"?: boolean;
        /**
          * Maximum length (number of characters) of value
         */
        "maxLength"?: number;
        /**
          * Minimum length (number of characters) of value
         */
        "minLength"?: number;
        /**
          * Internal event for updating disabled form elements
         */
        "on_disabledChange"?: (event: NexusTextareaCustomEvent<any>) => void;
        /**
          * Placehlder text for the textarea
         */
        "placeholder"?: string;
        /**
          * Whether the form control is required
         */
        "required"?: boolean;
        /**
          * Specifies the visible number of lines in a text area
         */
        "rows"?: number;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    interface NexusToast {
        /**
          * Trigger automatic close of toast after n milli-seconds
         */
        "autoClose"?: number;
        /**
          * Whether the toast can be closed.
         */
        "closeable"?: boolean;
        /**
          * custom icon for toast
         */
        "iconSrc"?: string;
        /**
          * Event fired when the tooltip close button is clicked.
         */
        "onCloseEvent"?: (event: NexusToastCustomEvent<any>) => void;
        /**
          * The position of the toast
         */
        "position"?: 'top' | 'bottom';
        /**
          * Hide toasts when set to false.
         */
        "show"?: boolean;
        /**
          * The style of the toast.
         */
        "variant"?: typVariant1;
    }
    interface NexusToggle {
        /**
          * The unique identifier of the toggle.
         */
        "attrId"?: string;
        /**
          * Whether the toggle is disabled.
         */
        "disabled"?: boolean;
        /**
          * Set label to be dispayed on right hand side of toggle.
         */
        "labelActive"?: string;
        /**
          * Set label to be dispayed on left hand side of toggle.
         */
        "labelInactive"?: string;
        /**
          * Whether the toggle is required.
         */
        "required"?: boolean;
        /**
          * Set size for the toggle. size variants represented as width x height [ xs = 32px x 16px, sm = 48px x 24px, md = 80px x 40px, lg = 112px x 56px, xl = 128px x 64px ]
         */
        "size"?: typSize;
        /**
          * Whether the toggle is on or off.
         */
        "toggled"?: boolean;
        /**
          * Toggle type, switch by default.
         */
        "type"?: 'switch' | 'button';
        /**
          * Set the value for toggle based on toggle identifier.
         */
        "value"?: string;
    }
    interface NexusTooltip {
        /**
          * Allows tooltip to persist on click to trigger.
         */
        "allowClick"?: boolean;
        /**
          * The Unique identifier for the tooltip. If none is provided one will be added by default.
         */
        "attrId"?: string;
        /**
          * Position of the tooltip (top, right, bottom, left). If nothing is provided, it will be calculated based on the screen size.
         */
        "placement"?: 'top' | 'bottom' | 'left' | 'right' | '';
    }
    interface NexusTooltipContent {
        /**
          * Internal event for closing tooltip content
          * @param positions
          * @param id
         */
        "on_closeTooltip"?: (event: NexusTooltipContentCustomEvent<any>) => void;
    }
    interface NexusTooltipTrigger {
    }
    interface NexusTree {
        /**
          * Whether the tree is open
         */
        "open"?: boolean;
    }
    interface NexusTreeContent {
    }
    interface NexusTreeTrigger {
        /**
          * Private event fired when the tree is toggled
         */
        "on_toggleTree"?: (event: NexusTreeTriggerCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "nexus-accordion": NexusAccordion;
        "nexus-accordion-content": NexusAccordionContent;
        "nexus-accordion-group": NexusAccordionGroup;
        "nexus-accordion-trigger": NexusAccordionTrigger;
        "nexus-avatar": NexusAvatar;
        "nexus-badge": NexusBadge;
        "nexus-bar-chart": NexusBarChart;
        "nexus-breadcrumb": NexusBreadcrumb;
        "nexus-breadcrumb-item": NexusBreadcrumbItem;
        "nexus-card": NexusCard;
        "nexus-card-avatar": NexusCardAvatar;
        "nexus-card-body": NexusCardBody;
        "nexus-card-body-image": NexusCardBodyImage;
        "nexus-card-footer": NexusCardFooter;
        "nexus-card-header": NexusCardHeader;
        "nexus-card-header-button": NexusCardHeaderButton;
        "nexus-card-header-details": NexusCardHeaderDetails;
        "nexus-card-header-subtitle": NexusCardHeaderSubtitle;
        "nexus-card-header-title": NexusCardHeaderTitle;
        "nexus-carousel": NexusCarousel;
        "nexus-carousel-item": NexusCarouselItem;
        "nexus-charts": NexusCharts;
        "nexus-checkbox": NexusCheckbox;
        "nexus-chip": NexusChip;
        "nexus-chip-group": NexusChipGroup;
        "nexus-dropdown": NexusDropdown;
        "nexus-error-message": NexusErrorMessage;
        "nexus-file-upload": NexusFileUpload;
        "nexus-footer": NexusFooter;
        "nexus-footer-bottom": NexusFooterBottom;
        "nexus-footer-column": NexusFooterColumn;
        "nexus-footer-content": NexusFooterContent;
        "nexus-footer-content-title": NexusFooterContentTitle;
        "nexus-footer-logo": NexusFooterLogo;
        "nexus-form-field": NexusFormField;
        "nexus-header": NexusHeader;
        "nexus-header-logo": NexusHeaderLogo;
        "nexus-header-menu": NexusHeaderMenu;
        "nexus-icon": NexusIcon;
        "nexus-input": NexusInput;
        "nexus-label": NexusLabel;
        "nexus-line-chart": NexusLineChart;
        "nexus-loader": NexusLoader;
        "nexus-menu": NexusMenu;
        "nexus-menu-item": NexusMenuItem;
        "nexus-message": NexusMessage;
        "nexus-modal": NexusModal;
        "nexus-modal-body": NexusModalBody;
        "nexus-modal-footer": NexusModalFooter;
        "nexus-modal-header": NexusModalHeader;
        "nexus-modal-header-subtitle": NexusModalHeaderSubtitle;
        "nexus-notification": NexusNotification;
        "nexus-option": NexusOption;
        "nexus-pagination": NexusPagination;
        "nexus-pie-chart": NexusPieChart;
        "nexus-pin-entry": NexusPinEntry;
        "nexus-progress-bar": NexusProgressBar;
        "nexus-progress-bar-label": NexusProgressBarLabel;
        "nexus-radio": NexusRadio;
        "nexus-search": NexusSearch;
        "nexus-search-list": NexusSearchList;
        "nexus-search-list-item": NexusSearchListItem;
        "nexus-select": NexusSelect;
        "nexus-slider": NexusSlider;
        "nexus-stacked-bar-chart": NexusStackedBarChart;
        "nexus-stepper": NexusStepper;
        "nexus-stepper-item": NexusStepperItem;
        "nexus-tab-bar": NexusTabBar;
        "nexus-table": NexusTable;
        "nexus-textarea": NexusTextarea;
        "nexus-toast": NexusToast;
        "nexus-toggle": NexusToggle;
        "nexus-tooltip": NexusTooltip;
        "nexus-tooltip-content": NexusTooltipContent;
        "nexus-tooltip-trigger": NexusTooltipTrigger;
        "nexus-tree": NexusTree;
        "nexus-tree-content": NexusTreeContent;
        "nexus-tree-trigger": NexusTreeTrigger;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "nexus-accordion": LocalJSX.NexusAccordion & JSXBase.HTMLAttributes<HTMLNexusAccordionElement>;
            "nexus-accordion-content": LocalJSX.NexusAccordionContent & JSXBase.HTMLAttributes<HTMLNexusAccordionContentElement>;
            "nexus-accordion-group": LocalJSX.NexusAccordionGroup & JSXBase.HTMLAttributes<HTMLNexusAccordionGroupElement>;
            "nexus-accordion-trigger": LocalJSX.NexusAccordionTrigger & JSXBase.HTMLAttributes<HTMLNexusAccordionTriggerElement>;
            "nexus-avatar": LocalJSX.NexusAvatar & JSXBase.HTMLAttributes<HTMLNexusAvatarElement>;
            "nexus-badge": LocalJSX.NexusBadge & JSXBase.HTMLAttributes<HTMLNexusBadgeElement>;
            "nexus-bar-chart": LocalJSX.NexusBarChart & JSXBase.HTMLAttributes<HTMLNexusBarChartElement>;
            "nexus-breadcrumb": LocalJSX.NexusBreadcrumb & JSXBase.HTMLAttributes<HTMLNexusBreadcrumbElement>;
            "nexus-breadcrumb-item": LocalJSX.NexusBreadcrumbItem & JSXBase.HTMLAttributes<HTMLNexusBreadcrumbItemElement>;
            "nexus-card": LocalJSX.NexusCard & JSXBase.HTMLAttributes<HTMLNexusCardElement>;
            "nexus-card-avatar": LocalJSX.NexusCardAvatar & JSXBase.HTMLAttributes<HTMLNexusCardAvatarElement>;
            "nexus-card-body": LocalJSX.NexusCardBody & JSXBase.HTMLAttributes<HTMLNexusCardBodyElement>;
            "nexus-card-body-image": LocalJSX.NexusCardBodyImage & JSXBase.HTMLAttributes<HTMLNexusCardBodyImageElement>;
            "nexus-card-footer": LocalJSX.NexusCardFooter & JSXBase.HTMLAttributes<HTMLNexusCardFooterElement>;
            "nexus-card-header": LocalJSX.NexusCardHeader & JSXBase.HTMLAttributes<HTMLNexusCardHeaderElement>;
            "nexus-card-header-button": LocalJSX.NexusCardHeaderButton & JSXBase.HTMLAttributes<HTMLNexusCardHeaderButtonElement>;
            "nexus-card-header-details": LocalJSX.NexusCardHeaderDetails & JSXBase.HTMLAttributes<HTMLNexusCardHeaderDetailsElement>;
            "nexus-card-header-subtitle": LocalJSX.NexusCardHeaderSubtitle & JSXBase.HTMLAttributes<HTMLNexusCardHeaderSubtitleElement>;
            "nexus-card-header-title": LocalJSX.NexusCardHeaderTitle & JSXBase.HTMLAttributes<HTMLNexusCardHeaderTitleElement>;
            "nexus-carousel": LocalJSX.NexusCarousel & JSXBase.HTMLAttributes<HTMLNexusCarouselElement>;
            "nexus-carousel-item": LocalJSX.NexusCarouselItem & JSXBase.HTMLAttributes<HTMLNexusCarouselItemElement>;
            "nexus-charts": LocalJSX.NexusCharts & JSXBase.HTMLAttributes<HTMLNexusChartsElement>;
            "nexus-checkbox": LocalJSX.NexusCheckbox & JSXBase.HTMLAttributes<HTMLNexusCheckboxElement>;
            "nexus-chip": LocalJSX.NexusChip & JSXBase.HTMLAttributes<HTMLNexusChipElement>;
            "nexus-chip-group": LocalJSX.NexusChipGroup & JSXBase.HTMLAttributes<HTMLNexusChipGroupElement>;
            "nexus-dropdown": LocalJSX.NexusDropdown & JSXBase.HTMLAttributes<HTMLNexusDropdownElement>;
            "nexus-error-message": LocalJSX.NexusErrorMessage & JSXBase.HTMLAttributes<HTMLNexusErrorMessageElement>;
            "nexus-file-upload": LocalJSX.NexusFileUpload & JSXBase.HTMLAttributes<HTMLNexusFileUploadElement>;
            "nexus-footer": LocalJSX.NexusFooter & JSXBase.HTMLAttributes<HTMLNexusFooterElement>;
            "nexus-footer-bottom": LocalJSX.NexusFooterBottom & JSXBase.HTMLAttributes<HTMLNexusFooterBottomElement>;
            "nexus-footer-column": LocalJSX.NexusFooterColumn & JSXBase.HTMLAttributes<HTMLNexusFooterColumnElement>;
            "nexus-footer-content": LocalJSX.NexusFooterContent & JSXBase.HTMLAttributes<HTMLNexusFooterContentElement>;
            "nexus-footer-content-title": LocalJSX.NexusFooterContentTitle & JSXBase.HTMLAttributes<HTMLNexusFooterContentTitleElement>;
            "nexus-footer-logo": LocalJSX.NexusFooterLogo & JSXBase.HTMLAttributes<HTMLNexusFooterLogoElement>;
            "nexus-form-field": LocalJSX.NexusFormField & JSXBase.HTMLAttributes<HTMLNexusFormFieldElement>;
            "nexus-header": LocalJSX.NexusHeader & JSXBase.HTMLAttributes<HTMLNexusHeaderElement>;
            "nexus-header-logo": LocalJSX.NexusHeaderLogo & JSXBase.HTMLAttributes<HTMLNexusHeaderLogoElement>;
            "nexus-header-menu": LocalJSX.NexusHeaderMenu & JSXBase.HTMLAttributes<HTMLNexusHeaderMenuElement>;
            "nexus-icon": LocalJSX.NexusIcon & JSXBase.HTMLAttributes<HTMLNexusIconElement>;
            "nexus-input": LocalJSX.NexusInput & JSXBase.HTMLAttributes<HTMLNexusInputElement>;
            "nexus-label": LocalJSX.NexusLabel & JSXBase.HTMLAttributes<HTMLNexusLabelElement>;
            "nexus-line-chart": LocalJSX.NexusLineChart & JSXBase.HTMLAttributes<HTMLNexusLineChartElement>;
            "nexus-loader": LocalJSX.NexusLoader & JSXBase.HTMLAttributes<HTMLNexusLoaderElement>;
            "nexus-menu": LocalJSX.NexusMenu & JSXBase.HTMLAttributes<HTMLNexusMenuElement>;
            "nexus-menu-item": LocalJSX.NexusMenuItem & JSXBase.HTMLAttributes<HTMLNexusMenuItemElement>;
            "nexus-message": LocalJSX.NexusMessage & JSXBase.HTMLAttributes<HTMLNexusMessageElement>;
            "nexus-modal": LocalJSX.NexusModal & JSXBase.HTMLAttributes<HTMLNexusModalElement>;
            "nexus-modal-body": LocalJSX.NexusModalBody & JSXBase.HTMLAttributes<HTMLNexusModalBodyElement>;
            "nexus-modal-footer": LocalJSX.NexusModalFooter & JSXBase.HTMLAttributes<HTMLNexusModalFooterElement>;
            "nexus-modal-header": LocalJSX.NexusModalHeader & JSXBase.HTMLAttributes<HTMLNexusModalHeaderElement>;
            "nexus-modal-header-subtitle": LocalJSX.NexusModalHeaderSubtitle & JSXBase.HTMLAttributes<HTMLNexusModalHeaderSubtitleElement>;
            "nexus-notification": LocalJSX.NexusNotification & JSXBase.HTMLAttributes<HTMLNexusNotificationElement>;
            "nexus-option": LocalJSX.NexusOption & JSXBase.HTMLAttributes<HTMLNexusOptionElement>;
            "nexus-pagination": LocalJSX.NexusPagination & JSXBase.HTMLAttributes<HTMLNexusPaginationElement>;
            "nexus-pie-chart": LocalJSX.NexusPieChart & JSXBase.HTMLAttributes<HTMLNexusPieChartElement>;
            "nexus-pin-entry": LocalJSX.NexusPinEntry & JSXBase.HTMLAttributes<HTMLNexusPinEntryElement>;
            "nexus-progress-bar": LocalJSX.NexusProgressBar & JSXBase.HTMLAttributes<HTMLNexusProgressBarElement>;
            "nexus-progress-bar-label": LocalJSX.NexusProgressBarLabel & JSXBase.HTMLAttributes<HTMLNexusProgressBarLabelElement>;
            "nexus-radio": LocalJSX.NexusRadio & JSXBase.HTMLAttributes<HTMLNexusRadioElement>;
            "nexus-search": LocalJSX.NexusSearch & JSXBase.HTMLAttributes<HTMLNexusSearchElement>;
            "nexus-search-list": LocalJSX.NexusSearchList & JSXBase.HTMLAttributes<HTMLNexusSearchListElement>;
            "nexus-search-list-item": LocalJSX.NexusSearchListItem & JSXBase.HTMLAttributes<HTMLNexusSearchListItemElement>;
            "nexus-select": LocalJSX.NexusSelect & JSXBase.HTMLAttributes<HTMLNexusSelectElement>;
            "nexus-slider": LocalJSX.NexusSlider & JSXBase.HTMLAttributes<HTMLNexusSliderElement>;
            "nexus-stacked-bar-chart": LocalJSX.NexusStackedBarChart & JSXBase.HTMLAttributes<HTMLNexusStackedBarChartElement>;
            "nexus-stepper": LocalJSX.NexusStepper & JSXBase.HTMLAttributes<HTMLNexusStepperElement>;
            "nexus-stepper-item": LocalJSX.NexusStepperItem & JSXBase.HTMLAttributes<HTMLNexusStepperItemElement>;
            "nexus-tab-bar": LocalJSX.NexusTabBar & JSXBase.HTMLAttributes<HTMLNexusTabBarElement>;
            "nexus-table": LocalJSX.NexusTable & JSXBase.HTMLAttributes<HTMLNexusTableElement>;
            "nexus-textarea": LocalJSX.NexusTextarea & JSXBase.HTMLAttributes<HTMLNexusTextareaElement>;
            "nexus-toast": LocalJSX.NexusToast & JSXBase.HTMLAttributes<HTMLNexusToastElement>;
            "nexus-toggle": LocalJSX.NexusToggle & JSXBase.HTMLAttributes<HTMLNexusToggleElement>;
            "nexus-tooltip": LocalJSX.NexusTooltip & JSXBase.HTMLAttributes<HTMLNexusTooltipElement>;
            "nexus-tooltip-content": LocalJSX.NexusTooltipContent & JSXBase.HTMLAttributes<HTMLNexusTooltipContentElement>;
            "nexus-tooltip-trigger": LocalJSX.NexusTooltipTrigger & JSXBase.HTMLAttributes<HTMLNexusTooltipTriggerElement>;
            "nexus-tree": LocalJSX.NexusTree & JSXBase.HTMLAttributes<HTMLNexusTreeElement>;
            "nexus-tree-content": LocalJSX.NexusTreeContent & JSXBase.HTMLAttributes<HTMLNexusTreeContentElement>;
            "nexus-tree-trigger": LocalJSX.NexusTreeTrigger & JSXBase.HTMLAttributes<HTMLNexusTreeTriggerElement>;
        }
    }
}
